drop policy "visible to instructors and self if released is true" on "public"."grader_results";

revoke delete on table "public"."grader_configs" from "anon";

revoke insert on table "public"."grader_configs" from "anon";

revoke references on table "public"."grader_configs" from "anon";

revoke select on table "public"."grader_configs" from "anon";

revoke trigger on table "public"."grader_configs" from "anon";

revoke truncate on table "public"."grader_configs" from "anon";

revoke update on table "public"."grader_configs" from "anon";

revoke delete on table "public"."grader_configs" from "authenticated";

revoke insert on table "public"."grader_configs" from "authenticated";

revoke references on table "public"."grader_configs" from "authenticated";

revoke select on table "public"."grader_configs" from "authenticated";

revoke trigger on table "public"."grader_configs" from "authenticated";

revoke truncate on table "public"."grader_configs" from "authenticated";

revoke update on table "public"."grader_configs" from "authenticated";

revoke delete on table "public"."grader_configs" from "service_role";

revoke insert on table "public"."grader_configs" from "service_role";

revoke references on table "public"."grader_configs" from "service_role";

revoke select on table "public"."grader_configs" from "service_role";

revoke trigger on table "public"."grader_configs" from "service_role";

revoke truncate on table "public"."grader_configs" from "service_role";

revoke update on table "public"."grader_configs" from "service_role";

revoke delete on table "public"."user_roles" from "anon";

revoke insert on table "public"."user_roles" from "anon";

revoke references on table "public"."user_roles" from "anon";

revoke select on table "public"."user_roles" from "anon";

revoke trigger on table "public"."user_roles" from "anon";

revoke truncate on table "public"."user_roles" from "anon";

revoke update on table "public"."user_roles" from "anon";

alter table "public"."grader_configs" drop constraint "grader_configs_assignment_id_fkey";

alter table "public"."grader_configs" drop constraint "grader_configs_id_key";

alter table "public"."grader_results" drop constraint "grader_results_id_key";

alter table "public"."help_requests" drop constraint "help_requests_helper_fkey";

alter table "public"."user_roles" drop constraint "user_roles_user_id_role_key";

alter table "public"."discussion_thread_likes" drop constraint "discussion_thread_likes_user_fkey";

drop view if exists "public"."submissions_agg";

alter table "public"."grader_configs" drop constraint "grader_configs_pkey";

alter table "public"."grader_results" drop constraint "grader_results_pkey";

drop index if exists "public"."grader_results_id_key";

drop index if exists "public"."discussion_thread_likes_discussion_thread_user_idx";

drop index if exists "public"."grader_configs_id_key";

drop index if exists "public"."grader_configs_pkey";

drop index if exists "public"."grader_results_pkey";

drop index if exists "public"."user_roles_user_id_role_key";

drop table "public"."grader_configs";

create table "public"."autograder" (
    "id" bigint not null,
    "created_at" timestamp with time zone not null default now(),
    "grader_repo" text,
    "workflow_sha" text,
    "grader_commit_sha" text
);


alter table "public"."autograder" enable row level security;

create table "public"."autograder_regression_test" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "repository" text not null,
    "autograder_id" bigint not null
);


alter table "public"."autograder_regression_test" enable row level security;

create table "public"."grader_result_output" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "output" text not null,
    "format" text not null,
    "visibility" feedback_visibility not null,
    "class_id" bigint not null,
    "student_id" uuid,
    "grader_result_id" bigint not null
);


alter table "public"."grader_result_output" enable row level security;

create table "public"."grader_result_tests" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "score" numeric,
    "max_score" numeric,
    "name" text not null,
    "name_format" text not null default 'text'::text,
    "extra_data" json,
    "output" text,
    "output_format" text,
    "class_id" bigint not null,
    "student_id" uuid,
    "part" text,
    "grader_result_id" bigint not null
);


alter table "public"."grader_result_tests" enable row level security;

create table "public"."help_request_messages" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "class_id" bigint not null,
    "author" uuid not null,
    "message" text not null,
    "instructors_only" boolean not null default false,
    "help_request_id" bigint not null,
    "requestor" uuid
);


alter table "public"."help_request_messages" enable row level security;

create table "public"."name_generation_words" (
    "id" bigint generated by default as identity not null,
    "word" text not null,
    "is_noun" boolean not null,
    "is_adjective" boolean not null
);


alter table "public"."name_generation_words" enable row level security;

create table "public"."rubrics" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "ordinal" smallint not null,
    "name" text,
    "deduction" smallint not null,
    "class_id" bigint
);


alter table "public"."rubrics" enable row level security;

create table "public"."video_meeting_sessions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "help_request_id" bigint not null,
    "chime_meeting_id" text,
    "started" timestamp with time zone,
    "ended" timestamp with time zone,
    "class_id" bigint not null
);


alter table "public"."video_meeting_sessions" enable row level security;

alter table "public"."assignments" alter column "template_repo" set data type text using "template_repo"::text;

alter table "public"."discussion_thread_likes" drop column "user";

alter table "public"."discussion_thread_likes" add column "creator" uuid not null;

alter table "public"."discussion_thread_likes" add column "emoji" text not null;

alter table "public"."discussion_threads" add column "ordinal" bigint;

alter table "public"."discussion_threads" add column "topic_id" bigint not null;

alter table "public"."discussion_topics" drop column "allowed_modes";

alter table "public"."discussion_topics" add column "description" text not null;

alter table "public"."discussion_topics" add column "ordinal" smallint not null default '0'::smallint;

alter table "public"."discussion_topics" alter column "class_id" set not null;

alter table "public"."discussion_topics" alter column "color" set not null;

alter table "public"."discussion_topics" alter column "topic" set not null;

alter table "public"."grader_results" drop column "feedback";

alter table "public"."grader_results" drop column "output";

alter table "public"."grader_results" drop column "published";

alter table "public"."grader_results" add column "autograder_regression_test" bigint;

alter table "public"."grader_results" add column "class_id" bigint not null;

alter table "public"."grader_results" add column "grader_action_sha" text;

alter table "public"."grader_results" add column "id" bigint generated by default as identity not null;

alter table "public"."grader_results" add column "lint_output" text not null;

alter table "public"."grader_results" add column "lint_output_format" text not null;

alter table "public"."grader_results" add column "lint_passed" boolean not null;

alter table "public"."grader_results" add column "max_score" smallint not null default '100'::smallint;

alter table "public"."grader_results" add column "user_id" uuid default gen_random_uuid();

alter table "public"."grader_results" alter column "submission_id" drop not null;

alter table "public"."help_queues" add column "color" text;

alter table "public"."help_queues" add column "depth" bigint not null;

alter table "public"."help_queues" alter column "description" set not null;

alter table "public"."help_requests" drop column "help_ended_at";

alter table "public"."help_requests" drop column "help_started_at";

alter table "public"."help_requests" drop column "helper";

alter table "public"."help_requests" add column "assignee" uuid;

alter table "public"."help_requests" add column "class_id" bigint not null;

alter table "public"."help_requests" add column "is_video_live" boolean not null default false;

alter table "public"."help_requests" add column "resolved_at" timestamp with time zone;

alter table "public"."help_requests" add column "resolved_by" uuid;

alter table "public"."public_profiles" drop column "username";

alter table "public"."public_profiles" add column "avatar" text not null;

alter table "public"."public_profiles" add column "is_instructor" boolean not null;

alter table "public"."public_profiles" add column "name" text not null;

alter table "public"."submission_files" add column "user_id" uuid not null;

alter table "public"."submissions" add column "check_run_id" bigint;

alter table "public"."submissions" add column "ordinal" integer not null default 1;

alter table "public"."submissions" alter column "class_id" set not null;

CREATE UNIQUE INDEX assignment_rubric_pkey ON public.rubrics USING btree (id);

CREATE UNIQUE INDEX autograder_regression_test_pkey ON public.autograder_regression_test USING btree (id);

CREATE UNIQUE INDEX grader_result_output_pkey ON public.grader_result_output USING btree (id);

CREATE UNIQUE INDEX grader_results_submission_id_key ON public.grader_results USING btree (submission_id);

CREATE UNIQUE INDEX grader_test_results_pkey ON public.grader_result_tests USING btree (id);

CREATE UNIQUE INDEX help_request_messages_pkey ON public.help_request_messages USING btree (id);

CREATE UNIQUE INDEX name_generation_words_pkey ON public.name_generation_words USING btree (id);

CREATE UNIQUE INDEX video_meeting_sessions_pkey ON public.video_meeting_sessions USING btree (id);

CREATE UNIQUE INDEX discussion_thread_likes_discussion_thread_user_idx ON public.discussion_thread_likes USING btree (discussion_thread, creator);

CREATE UNIQUE INDEX grader_configs_id_key ON public.autograder USING btree (id);

CREATE UNIQUE INDEX grader_configs_pkey ON public.autograder USING btree (id);

CREATE UNIQUE INDEX grader_results_pkey ON public.grader_results USING btree (id);

CREATE UNIQUE INDEX user_roles_user_id_role_key ON public.user_roles USING btree (user_id, role, class_id);

alter table "public"."autograder" add constraint "grader_configs_pkey" PRIMARY KEY using index "grader_configs_pkey";

alter table "public"."autograder_regression_test" add constraint "autograder_regression_test_pkey" PRIMARY KEY using index "autograder_regression_test_pkey";

alter table "public"."grader_result_output" add constraint "grader_result_output_pkey" PRIMARY KEY using index "grader_result_output_pkey";

alter table "public"."grader_result_tests" add constraint "grader_test_results_pkey" PRIMARY KEY using index "grader_test_results_pkey";

alter table "public"."help_request_messages" add constraint "help_request_messages_pkey" PRIMARY KEY using index "help_request_messages_pkey";

alter table "public"."name_generation_words" add constraint "name_generation_words_pkey" PRIMARY KEY using index "name_generation_words_pkey";

alter table "public"."rubrics" add constraint "assignment_rubric_pkey" PRIMARY KEY using index "assignment_rubric_pkey";

alter table "public"."video_meeting_sessions" add constraint "video_meeting_sessions_pkey" PRIMARY KEY using index "video_meeting_sessions_pkey";

alter table "public"."grader_results" add constraint "grader_results_pkey" PRIMARY KEY using index "grader_results_pkey";

alter table "public"."autograder" add constraint "grader_configs_id_fkey" FOREIGN KEY (id) REFERENCES assignments(id) not valid;

alter table "public"."autograder" validate constraint "grader_configs_id_fkey";

alter table "public"."autograder" add constraint "grader_configs_id_key" UNIQUE using index "grader_configs_id_key";

alter table "public"."autograder_regression_test" add constraint "autograder_regression_test_autograder_id_fkey" FOREIGN KEY (autograder_id) REFERENCES autograder(id) not valid;

alter table "public"."autograder_regression_test" validate constraint "autograder_regression_test_autograder_id_fkey";

alter table "public"."discussion_threads" add constraint "discussion_threads_answer_fkey" FOREIGN KEY (answer) REFERENCES discussion_threads(id) not valid;

alter table "public"."discussion_threads" validate constraint "discussion_threads_answer_fkey";

alter table "public"."discussion_threads" add constraint "discussion_threads_topic_id_fkey" FOREIGN KEY (topic_id) REFERENCES discussion_topics(id) not valid;

alter table "public"."discussion_threads" validate constraint "discussion_threads_topic_id_fkey";

alter table "public"."grader_result_output" add constraint "grader_result_output_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) not valid;

alter table "public"."grader_result_output" validate constraint "grader_result_output_class_id_fkey";

alter table "public"."grader_result_output" add constraint "grader_result_output_grader_result_id_fkey" FOREIGN KEY (grader_result_id) REFERENCES grader_results(id) not valid;

alter table "public"."grader_result_output" validate constraint "grader_result_output_grader_result_id_fkey";

alter table "public"."grader_result_output" add constraint "grader_result_output_student_id_fkey" FOREIGN KEY (student_id) REFERENCES profiles(id) not valid;

alter table "public"."grader_result_output" validate constraint "grader_result_output_student_id_fkey";

alter table "public"."grader_result_tests" add constraint "grader_result_tests_grader_result_id_fkey" FOREIGN KEY (grader_result_id) REFERENCES grader_results(id) not valid;

alter table "public"."grader_result_tests" validate constraint "grader_result_tests_grader_result_id_fkey";

alter table "public"."grader_result_tests" add constraint "grader_result_tests_student_id_fkey" FOREIGN KEY (student_id) REFERENCES profiles(id) not valid;

alter table "public"."grader_result_tests" validate constraint "grader_result_tests_student_id_fkey";

alter table "public"."grader_result_tests" add constraint "grader_test_results_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) not valid;

alter table "public"."grader_result_tests" validate constraint "grader_test_results_class_id_fkey";

alter table "public"."grader_results" add constraint "grader_results_autograder_regression_test_fkey" FOREIGN KEY (autograder_regression_test) REFERENCES autograder_regression_test(id) not valid;

alter table "public"."grader_results" validate constraint "grader_results_autograder_regression_test_fkey";

alter table "public"."grader_results" add constraint "grader_results_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) not valid;

alter table "public"."grader_results" validate constraint "grader_results_class_id_fkey";

alter table "public"."grader_results" add constraint "grader_results_submission_id_fkey" FOREIGN KEY (submission_id) REFERENCES submissions(id) not valid;

alter table "public"."grader_results" validate constraint "grader_results_submission_id_fkey";

alter table "public"."grader_results" add constraint "grader_results_submission_id_key" UNIQUE using index "grader_results_submission_id_key";

alter table "public"."grader_results" add constraint "grader_results_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid;

alter table "public"."grader_results" validate constraint "grader_results_user_id_fkey";

alter table "public"."help_request_messages" add constraint "help_request_messages_author_fkey" FOREIGN KEY (author) REFERENCES public_profiles(id) not valid;

alter table "public"."help_request_messages" validate constraint "help_request_messages_author_fkey";

alter table "public"."help_request_messages" add constraint "help_request_messages_author_fkey1" FOREIGN KEY (author) REFERENCES profiles(id) not valid;

alter table "public"."help_request_messages" validate constraint "help_request_messages_author_fkey1";

alter table "public"."help_request_messages" add constraint "help_request_messages_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) not valid;

alter table "public"."help_request_messages" validate constraint "help_request_messages_class_id_fkey";

alter table "public"."help_request_messages" add constraint "help_request_messages_help_request_id_fkey" FOREIGN KEY (help_request_id) REFERENCES help_requests(id) not valid;

alter table "public"."help_request_messages" validate constraint "help_request_messages_help_request_id_fkey";

alter table "public"."help_request_messages" add constraint "help_request_messages_requestor_fkey" FOREIGN KEY (requestor) REFERENCES public_profiles(id) not valid;

alter table "public"."help_request_messages" validate constraint "help_request_messages_requestor_fkey";

alter table "public"."help_requests" add constraint "help_requests_assignee_fkey" FOREIGN KEY (assignee) REFERENCES profiles(id) not valid;

alter table "public"."help_requests" validate constraint "help_requests_assignee_fkey";

alter table "public"."help_requests" add constraint "help_requests_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) not valid;

alter table "public"."help_requests" validate constraint "help_requests_class_id_fkey";

alter table "public"."help_requests" add constraint "help_requests_resolved_by_fkey" FOREIGN KEY (resolved_by) REFERENCES profiles(id) not valid;

alter table "public"."help_requests" validate constraint "help_requests_resolved_by_fkey";

alter table "public"."rubrics" add constraint "assignment_rubric_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) not valid;

alter table "public"."rubrics" validate constraint "assignment_rubric_class_id_fkey";

alter table "public"."submission_files" add constraint "submission_files_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid;

alter table "public"."submission_files" validate constraint "submission_files_user_id_fkey";

alter table "public"."video_meeting_sessions" add constraint "video_meeting_sessions_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) not valid;

alter table "public"."video_meeting_sessions" validate constraint "video_meeting_sessions_class_id_fkey";

alter table "public"."video_meeting_sessions" add constraint "video_meeting_sessions_help_request_id_fkey" FOREIGN KEY (help_request_id) REFERENCES help_requests(id) not valid;

alter table "public"."video_meeting_sessions" validate constraint "video_meeting_sessions_help_request_id_fkey";

alter table "public"."discussion_thread_likes" add constraint "discussion_thread_likes_user_fkey" FOREIGN KEY (creator) REFERENCES profiles(id) not valid;

alter table "public"."discussion_thread_likes" validate constraint "discussion_thread_likes_user_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.assignment_before_update()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
   CASE TG_OP
   WHEN 'UPDATE' THEN
      IF OLD.template_repo is not null and OLD.template_repo != NEW.template_repo then
         UPDATE autograder_regression_test SET repository = NEW.template_repo WHERE repository = OLD.template_repo AND autograder_id = NEW.id;
      elseif OLD.template_repo is null AND NEW.template_repo is not null then
         INSERT INTO autograder_regression_test (repository, autograder_id) VALUES (NEW.template_repo, NEW.id);
      elseif OLD.template_repo is not null and NEW.template_repo is null then
         DELETE FROM autograder_regression_test WHERE repository = NEW.template_repo and autograder_id = NEW.id;
      end if;
      RETURN NEW;
   ELSE
      RAISE EXCEPTION 'Unexpected TG_OP: "%". Should not occur!', TG_OP;
   END CASE;
   
END
$function$
;

CREATE OR REPLACE FUNCTION public.assignments_grader_config_auto_populate()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$begin
  INSERT INTO autograder (id) VALUES (NEW.id);
  INSERT INTO autograder_regression_test (autograder_id,repository) VALUES (NEW.id, NEW.template_repo);
  RETURN NULL;
end;$function$
;

create or replace view "public"."autograder_regression_test_by_grader" as  SELECT a.grader_repo,
    t.repository,
    s.sha,
    t.id,
    s.class_id
   FROM (((autograder_regression_test t
     JOIN autograder a ON ((a.id = t.autograder_id)))
     JOIN submissions s ON ((s.repository = t.repository)))
     JOIN grader_results g ON ((g.submission_id = s.id)))
  GROUP BY s.sha, a.grader_repo, t.repository, s.created_at, t.id, s.class_id
 HAVING (s.created_at = max(s.created_at));


CREATE OR REPLACE FUNCTION public.discussion_thread_root_patch()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
   CASE TG_OP
   WHEN 'INSERT' THEN
      if NEW.root is null then
         update discussion_threads set root = id where id = NEW.id;
      END if;
      RETURN NULL;
   ELSE
      RAISE EXCEPTION 'Unexpected TG_OP: "%". Should not occur!', TG_OP;
   END CASE;
   
END
$function$
;

CREATE OR REPLACE FUNCTION public.discussion_thread_set_ordinal()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
   CASE TG_OP
   WHEN 'INSERT' THEN
      NEW.ordinal = (select COUNT(*)+1 from discussion_threads where class = NEW.class);
      RETURN NEW;
   ELSE
      RAISE EXCEPTION 'Unexpected TG_OP: "%". Should not occur!', TG_OP;
   END CASE;
   
END
$function$
;

CREATE OR REPLACE FUNCTION public.generate_anon_name()
 RETURNS text
 LANGUAGE plpgsql
AS $function$declare
adj text;
noun text;
begin

select into noun word from public.name_generation_words where is_noun order by random() limit 1;
select into adj word from public.name_generation_words where is_adjective order by random() limit 1;

return adj || '-' || noun || '-' || (floor(random() * 9999));
end;$function$
;

CREATE OR REPLACE FUNCTION public.intval(character varying)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$

SELECT
CASE
    WHEN length(btrim(regexp_replace($1, '[^0-9]', '','g')))>0 THEN btrim(regexp_replace($1, '[^0-9]', '','g'))::integer
    ELSE 0
END AS intval;

$function$
;

CREATE OR REPLACE FUNCTION public.submissions_insert_hook()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
   CASE TG_OP
   WHEN 'INSERT' THEN
      SELECT count(*) FROM submissions where user_id=NEW.user_id and assignment_id=NEW.assignment_id INTO NEW.ordinal;
      NEW.ordinal = NEW.ordinal + 1;
      RETURN NEW;
   ELSE
      RAISE EXCEPTION 'Unexpected TG_OP: "%". Should not occur!', TG_OP;
   END CASE;
   
END
$function$
;

CREATE OR REPLACE FUNCTION public.user_register_create_demo_account()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
   existing_profile boolean;
   existing_public_profile boolean;
BEGIN
   CASE TG_OP
   WHEN 'INSERT' THEN
      SELECT EXISTS(SELECT 1 from public.profiles where id=NEW.id) INTO existing_profile;
      SELECT EXISTS(SELECT 1 from public.public_profiles WHERE id=NEW.id) INTO existing_public_profile;
      if not existing_profile then
         INSERT INTO public.profiles (id, name, avatar_url) VALUES (NEW.id, NEW.email, 'https://api.dicebear.com/9.x/identicon/svg?seed=' || NEW.email);
      end if;
      if not existing_public_profile then
          INSERT INTO public.public_profiles (id, name, avatar, is_instructor) VALUES (NEW.id, public.generate_anon_name(), 'identicon', false);
      end if;

      INSERT INTO public.user_roles (user_id, class_id,role) VALUES (NEW.id, 6, 'student');
      -- INSERT INTO public.user_roles (user_id, class_id,role) VALUES (NEW.id, 7, 'student');

      RETURN NEW;
   ELSE
      RAISE EXCEPTION 'Unexpected TG_OP: "%". Should not occur!', TG_OP;
   END CASE;
   
END
$function$
;

create or replace view "public"."submissions_agg" as  SELECT c.submissioncount,
    c.latestsubmissionid,
    s.id,
    s.created_at,
    s.assignment_id,
    s.user_id,
    s.released,
    s.sha,
    s.repository,
    s.run_attempt,
    s.run_number,
    g.score,
    g.ret_code,
    g.execution_time
   FROM ((( SELECT count(submissions.id) AS submissioncount,
            max(submissions.id) AS latestsubmissionid
           FROM submissions
          GROUP BY submissions.assignment_id, submissions.user_id) c
     JOIN submissions s ON ((s.id = c.latestsubmissionid)))
     LEFT JOIN grader_results g ON ((g.submission_id = s.id)));


grant delete on table "public"."autograder" to "anon";

grant insert on table "public"."autograder" to "anon";

grant references on table "public"."autograder" to "anon";

grant select on table "public"."autograder" to "anon";

grant trigger on table "public"."autograder" to "anon";

grant truncate on table "public"."autograder" to "anon";

grant update on table "public"."autograder" to "anon";

grant delete on table "public"."autograder" to "authenticated";

grant insert on table "public"."autograder" to "authenticated";

grant references on table "public"."autograder" to "authenticated";

grant select on table "public"."autograder" to "authenticated";

grant trigger on table "public"."autograder" to "authenticated";

grant truncate on table "public"."autograder" to "authenticated";

grant update on table "public"."autograder" to "authenticated";

grant delete on table "public"."autograder" to "service_role";

grant insert on table "public"."autograder" to "service_role";

grant references on table "public"."autograder" to "service_role";

grant select on table "public"."autograder" to "service_role";

grant trigger on table "public"."autograder" to "service_role";

grant truncate on table "public"."autograder" to "service_role";

grant update on table "public"."autograder" to "service_role";

grant delete on table "public"."autograder_regression_test" to "anon";

grant insert on table "public"."autograder_regression_test" to "anon";

grant references on table "public"."autograder_regression_test" to "anon";

grant select on table "public"."autograder_regression_test" to "anon";

grant trigger on table "public"."autograder_regression_test" to "anon";

grant truncate on table "public"."autograder_regression_test" to "anon";

grant update on table "public"."autograder_regression_test" to "anon";

grant delete on table "public"."autograder_regression_test" to "authenticated";

grant insert on table "public"."autograder_regression_test" to "authenticated";

grant references on table "public"."autograder_regression_test" to "authenticated";

grant select on table "public"."autograder_regression_test" to "authenticated";

grant trigger on table "public"."autograder_regression_test" to "authenticated";

grant truncate on table "public"."autograder_regression_test" to "authenticated";

grant update on table "public"."autograder_regression_test" to "authenticated";

grant delete on table "public"."autograder_regression_test" to "service_role";

grant insert on table "public"."autograder_regression_test" to "service_role";

grant references on table "public"."autograder_regression_test" to "service_role";

grant select on table "public"."autograder_regression_test" to "service_role";

grant trigger on table "public"."autograder_regression_test" to "service_role";

grant truncate on table "public"."autograder_regression_test" to "service_role";

grant update on table "public"."autograder_regression_test" to "service_role";

grant delete on table "public"."grader_result_output" to "anon";

grant insert on table "public"."grader_result_output" to "anon";

grant references on table "public"."grader_result_output" to "anon";

grant select on table "public"."grader_result_output" to "anon";

grant trigger on table "public"."grader_result_output" to "anon";

grant truncate on table "public"."grader_result_output" to "anon";

grant update on table "public"."grader_result_output" to "anon";

grant delete on table "public"."grader_result_output" to "authenticated";

grant insert on table "public"."grader_result_output" to "authenticated";

grant references on table "public"."grader_result_output" to "authenticated";

grant select on table "public"."grader_result_output" to "authenticated";

grant trigger on table "public"."grader_result_output" to "authenticated";

grant truncate on table "public"."grader_result_output" to "authenticated";

grant update on table "public"."grader_result_output" to "authenticated";

grant delete on table "public"."grader_result_output" to "service_role";

grant insert on table "public"."grader_result_output" to "service_role";

grant references on table "public"."grader_result_output" to "service_role";

grant select on table "public"."grader_result_output" to "service_role";

grant trigger on table "public"."grader_result_output" to "service_role";

grant truncate on table "public"."grader_result_output" to "service_role";

grant update on table "public"."grader_result_output" to "service_role";

grant delete on table "public"."grader_result_tests" to "anon";

grant insert on table "public"."grader_result_tests" to "anon";

grant references on table "public"."grader_result_tests" to "anon";

grant select on table "public"."grader_result_tests" to "anon";

grant trigger on table "public"."grader_result_tests" to "anon";

grant truncate on table "public"."grader_result_tests" to "anon";

grant update on table "public"."grader_result_tests" to "anon";

grant delete on table "public"."grader_result_tests" to "authenticated";

grant insert on table "public"."grader_result_tests" to "authenticated";

grant references on table "public"."grader_result_tests" to "authenticated";

grant select on table "public"."grader_result_tests" to "authenticated";

grant trigger on table "public"."grader_result_tests" to "authenticated";

grant truncate on table "public"."grader_result_tests" to "authenticated";

grant update on table "public"."grader_result_tests" to "authenticated";

grant delete on table "public"."grader_result_tests" to "service_role";

grant insert on table "public"."grader_result_tests" to "service_role";

grant references on table "public"."grader_result_tests" to "service_role";

grant select on table "public"."grader_result_tests" to "service_role";

grant trigger on table "public"."grader_result_tests" to "service_role";

grant truncate on table "public"."grader_result_tests" to "service_role";

grant update on table "public"."grader_result_tests" to "service_role";

grant delete on table "public"."help_request_messages" to "anon";

grant insert on table "public"."help_request_messages" to "anon";

grant references on table "public"."help_request_messages" to "anon";

grant select on table "public"."help_request_messages" to "anon";

grant trigger on table "public"."help_request_messages" to "anon";

grant truncate on table "public"."help_request_messages" to "anon";

grant update on table "public"."help_request_messages" to "anon";

grant delete on table "public"."help_request_messages" to "authenticated";

grant insert on table "public"."help_request_messages" to "authenticated";

grant references on table "public"."help_request_messages" to "authenticated";

grant select on table "public"."help_request_messages" to "authenticated";

grant trigger on table "public"."help_request_messages" to "authenticated";

grant truncate on table "public"."help_request_messages" to "authenticated";

grant update on table "public"."help_request_messages" to "authenticated";

grant delete on table "public"."help_request_messages" to "service_role";

grant insert on table "public"."help_request_messages" to "service_role";

grant references on table "public"."help_request_messages" to "service_role";

grant select on table "public"."help_request_messages" to "service_role";

grant trigger on table "public"."help_request_messages" to "service_role";

grant truncate on table "public"."help_request_messages" to "service_role";

grant update on table "public"."help_request_messages" to "service_role";

grant delete on table "public"."name_generation_words" to "anon";

grant insert on table "public"."name_generation_words" to "anon";

grant references on table "public"."name_generation_words" to "anon";

grant select on table "public"."name_generation_words" to "anon";

grant trigger on table "public"."name_generation_words" to "anon";

grant truncate on table "public"."name_generation_words" to "anon";

grant update on table "public"."name_generation_words" to "anon";

grant delete on table "public"."name_generation_words" to "authenticated";

grant insert on table "public"."name_generation_words" to "authenticated";

grant references on table "public"."name_generation_words" to "authenticated";

grant select on table "public"."name_generation_words" to "authenticated";

grant trigger on table "public"."name_generation_words" to "authenticated";

grant truncate on table "public"."name_generation_words" to "authenticated";

grant update on table "public"."name_generation_words" to "authenticated";

grant delete on table "public"."name_generation_words" to "service_role";

grant insert on table "public"."name_generation_words" to "service_role";

grant references on table "public"."name_generation_words" to "service_role";

grant select on table "public"."name_generation_words" to "service_role";

grant trigger on table "public"."name_generation_words" to "service_role";

grant truncate on table "public"."name_generation_words" to "service_role";

grant update on table "public"."name_generation_words" to "service_role";

grant delete on table "public"."rubrics" to "anon";

grant insert on table "public"."rubrics" to "anon";

grant references on table "public"."rubrics" to "anon";

grant select on table "public"."rubrics" to "anon";

grant trigger on table "public"."rubrics" to "anon";

grant truncate on table "public"."rubrics" to "anon";

grant update on table "public"."rubrics" to "anon";

grant delete on table "public"."rubrics" to "authenticated";

grant insert on table "public"."rubrics" to "authenticated";

grant references on table "public"."rubrics" to "authenticated";

grant select on table "public"."rubrics" to "authenticated";

grant trigger on table "public"."rubrics" to "authenticated";

grant truncate on table "public"."rubrics" to "authenticated";

grant update on table "public"."rubrics" to "authenticated";

grant delete on table "public"."rubrics" to "service_role";

grant insert on table "public"."rubrics" to "service_role";

grant references on table "public"."rubrics" to "service_role";

grant select on table "public"."rubrics" to "service_role";

grant trigger on table "public"."rubrics" to "service_role";

grant truncate on table "public"."rubrics" to "service_role";

grant update on table "public"."rubrics" to "service_role";

grant delete on table "public"."video_meeting_sessions" to "anon";

grant insert on table "public"."video_meeting_sessions" to "anon";

grant references on table "public"."video_meeting_sessions" to "anon";

grant select on table "public"."video_meeting_sessions" to "anon";

grant trigger on table "public"."video_meeting_sessions" to "anon";

grant truncate on table "public"."video_meeting_sessions" to "anon";

grant update on table "public"."video_meeting_sessions" to "anon";

grant delete on table "public"."video_meeting_sessions" to "authenticated";

grant insert on table "public"."video_meeting_sessions" to "authenticated";

grant references on table "public"."video_meeting_sessions" to "authenticated";

grant select on table "public"."video_meeting_sessions" to "authenticated";

grant trigger on table "public"."video_meeting_sessions" to "authenticated";

grant truncate on table "public"."video_meeting_sessions" to "authenticated";

grant update on table "public"."video_meeting_sessions" to "authenticated";

grant delete on table "public"."video_meeting_sessions" to "service_role";

grant insert on table "public"."video_meeting_sessions" to "service_role";

grant references on table "public"."video_meeting_sessions" to "service_role";

grant select on table "public"."video_meeting_sessions" to "service_role";

grant trigger on table "public"."video_meeting_sessions" to "service_role";

grant truncate on table "public"."video_meeting_sessions" to "service_role";

grant update on table "public"."video_meeting_sessions" to "service_role";

create policy "instructors rw"
on "public"."autograder"
as permissive
for all
to public
using (is_instructor_for_class(auth.uid(), ( SELECT assignments.class_id
   FROM assignments
  WHERE (assignments.id = autograder.id))));


create policy "instructors rw"
on "public"."autograder_regression_test"
as permissive
for all
to public
using (is_instructor_for_class(auth.uid(), ( SELECT assignments.class_id
   FROM assignments
  WHERE (assignments.id = autograder_regression_test.autograder_id))));


create policy "CRUD for own only"
on "public"."discussion_thread_likes"
as permissive
for all
to public
using ((creator = auth.uid()));


create policy "view in class"
on "public"."discussion_topics"
as permissive
for select
to public
using (is_in_class(auth.uid(), class_id));


create policy "visible to instructors always, and self conditionally"
on "public"."grader_result_output"
as permissive
for select
to public
using ((is_instructor_for_class(auth.uid(), class_id) OR ((auth.uid() = student_id) AND (visibility = 'visible'::feedback_visibility))));


create policy "visible to instructors and self"
on "public"."grader_result_tests"
as permissive
for select
to public
using ((is_instructor_for_class(auth.uid(), class_id) OR (auth.uid() = student_id)));


create policy "visible to instructors and self"
on "public"."grader_results"
as permissive
for select
to public
using ((is_instructor_for_class(auth.uid(), class_id) OR (auth.uid() = user_id)));


create policy "insert for self in class"
on "public"."help_request_messages"
as permissive
for insert
to public
with check ((is_in_class(auth.uid(), class_id) AND (auth.uid() = author)));


create policy "instructors view all, students view own"
on "public"."help_request_messages"
as permissive
for select
to public
using (((auth.uid() = author) OR (auth.uid() = requestor) OR is_instructor_for_class(auth.uid(), class_id)));


create policy "insert for own class"
on "public"."help_requests"
as permissive
for insert
to public
with check ((is_in_class(auth.uid(), class_id) AND (auth.uid() = creator) AND (assignee IS NULL)));


create policy "instructors can update"
on "public"."help_requests"
as permissive
for update
to public
using (is_instructor_for_class(auth.uid(), class_id));


create policy "students can set resolved"
on "public"."help_requests"
as permissive
for update
to public
using (((auth.uid() = creator) AND (resolved_by IS NULL)));


create policy "students view own, instructors view all"
on "public"."help_requests"
as permissive
for select
to public
using (((auth.uid() = creator) OR is_instructor_for_class(auth.uid(), class_id)));


create policy "update self"
on "public"."profiles"
as permissive
for update
to public
using ((id = auth.uid()));


create policy "view everyone"
on "public"."public_profiles"
as permissive
for select
to authenticated
using (true);


create policy "instructors CRUD"
on "public"."rubrics"
as permissive
for all
to public
using (is_instructor_for_class(auth.uid(), class_id));


create policy "view in class"
on "public"."video_meeting_sessions"
as permissive
for select
to public
using (is_in_class(auth.uid(), class_id));


CREATE TRIGGER assignment_before_update BEFORE UPDATE ON public.assignments FOR EACH ROW EXECUTE FUNCTION assignment_before_update();

CREATE TRIGGER assignments_grader_config_auto_create AFTER INSERT ON public.assignments FOR EACH ROW EXECUTE FUNCTION assignments_grader_config_auto_populate();

CREATE TRIGGER discussion_threads_patch_root AFTER INSERT ON public.discussion_threads FOR EACH ROW EXECUTE FUNCTION discussion_thread_root_patch();

CREATE TRIGGER discussion_threads_set_ordinal BEFORE INSERT ON public.discussion_threads FOR EACH ROW EXECUTE FUNCTION discussion_thread_set_ordinal();

CREATE TRIGGER submissions_insert_hook BEFORE INSERT ON public.submissions FOR EACH ROW EXECUTE FUNCTION submissions_insert_hook();


