drop policy "insert for own class" on "public"."help_requests";

drop policy "students can update their own requests" on "public"."help_requests";

drop policy "Users can view private help requests they created or are assign" on "public"."help_requests";

alter table "public"."help_requests" drop constraint "help_requests_creator_fkey";

create table "public"."help_request_students" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "help_request_id" bigint not null,
    "profile_id" uuid not null,
    "class_id" bigint not null
);


alter table "public"."help_request_students" enable row level security;

alter table "public"."help_requests" drop column "creator";

CREATE UNIQUE INDEX help_request_students_pkey ON public.help_request_students USING btree (id);

alter table "public"."help_request_students" add constraint "help_request_students_pkey" PRIMARY KEY using index "help_request_students_pkey";

alter table "public"."help_request_students" add constraint "help_request_students_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."help_request_students" validate constraint "help_request_students_class_id_fkey";

alter table "public"."help_request_students" add constraint "help_request_students_help_request_id_fkey" FOREIGN KEY (help_request_id) REFERENCES help_requests(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."help_request_students" validate constraint "help_request_students_help_request_id_fkey";

alter table "public"."help_request_students" add constraint "help_request_students_profile_id_fkey" FOREIGN KEY (profile_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."help_request_students" validate constraint "help_request_students_profile_id_fkey";

grant delete on table "public"."help_request_students" to "anon";

grant insert on table "public"."help_request_students" to "anon";

grant references on table "public"."help_request_students" to "anon";

grant select on table "public"."help_request_students" to "anon";

grant trigger on table "public"."help_request_students" to "anon";

grant truncate on table "public"."help_request_students" to "anon";

grant update on table "public"."help_request_students" to "anon";

grant delete on table "public"."help_request_students" to "authenticated";

grant insert on table "public"."help_request_students" to "authenticated";

grant references on table "public"."help_request_students" to "authenticated";

grant select on table "public"."help_request_students" to "authenticated";

grant trigger on table "public"."help_request_students" to "authenticated";

grant truncate on table "public"."help_request_students" to "authenticated";

grant update on table "public"."help_request_students" to "authenticated";

grant delete on table "public"."help_request_students" to "service_role";

grant insert on table "public"."help_request_students" to "service_role";

grant references on table "public"."help_request_students" to "service_role";

grant select on table "public"."help_request_students" to "service_role";

grant trigger on table "public"."help_request_students" to "service_role";

grant truncate on table "public"."help_request_students" to "service_role";

grant update on table "public"."help_request_students" to "service_role";

create policy "Instructors and Graders have full access"
on "public"."help_request_students"
as permissive
for all
to authenticated
using (authorizeforclassgrader(class_id))
with check (authorizeforclassgrader(class_id));


create policy "Students can add themselves to a help request"
on "public"."help_request_students"
as permissive
for insert
to authenticated
with check (authorizeforprofile(profile_id));


create policy "Students can remove themselves from a help request"
on "public"."help_request_students"
as permissive
for delete
to authenticated
using (authorizeforprofile(profile_id));


create policy "Students can view members of their help requests"
on "public"."help_request_students"
as permissive
for select
to authenticated
using ((help_request_id IN ( SELECT help_request_students_1.help_request_id
   FROM help_request_students help_request_students_1
  WHERE authorizeforprofile(help_request_students_1.profile_id))));


create policy "Insert for own class"
on "public"."help_requests"
as permissive
for insert
to authenticated
with check ((authorizeforclass(class_id) AND (assignee IS NULL)));


create policy "Students can update their own requests"
on "public"."help_requests"
as permissive
for update
to authenticated
using ((id IN ( SELECT help_request_students.help_request_id
   FROM help_request_students
  WHERE authorizeforprofile(help_request_students.profile_id))))
with check ((id IN ( SELECT help_request_students.help_request_id
   FROM help_request_students
  WHERE authorizeforprofile(help_request_students.profile_id))));


create policy "Users can view private help requests they created or are assign"
on "public"."help_requests"
as permissive
for select
to authenticated
using ((((NOT is_private) AND authorizeforclass(class_id)) OR authorizeforclassgrader(class_id) OR (is_private AND ((( SELECT auth.uid() AS uid) = assignee) OR (id IN ( SELECT help_request_students.help_request_id
   FROM help_request_students
  WHERE authorizeforprofile(help_request_students.profile_id)))))));



