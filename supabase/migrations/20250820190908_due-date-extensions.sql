create table "public"."student_deadline_extensions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "student_id" uuid not null,
    "class_id" bigint not null,
    "hours" integer not null,
    "includes_lab" boolean not null,
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."student_deadline_extensions" enable row level security;

CREATE UNIQUE INDEX student_deadline_extensions_pkey ON public.student_deadline_extensions USING btree (id);

alter table "public"."student_deadline_extensions" add constraint "student_deadline_extensions_pkey" PRIMARY KEY using index "student_deadline_extensions_pkey";

alter table "public"."student_deadline_extensions" add constraint "student_deadline_extensions_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."student_deadline_extensions" validate constraint "student_deadline_extensions_class_id_fkey";

alter table "public"."student_deadline_extensions" add constraint "student_deadline_extensions_student_id_fkey" FOREIGN KEY (student_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."student_deadline_extensions" validate constraint "student_deadline_extensions_student_id_fkey";

grant delete on table "public"."student_deadline_extensions" to "anon";

grant insert on table "public"."student_deadline_extensions" to "anon";

grant references on table "public"."student_deadline_extensions" to "anon";

grant select on table "public"."student_deadline_extensions" to "anon";

grant trigger on table "public"."student_deadline_extensions" to "anon";

grant truncate on table "public"."student_deadline_extensions" to "anon";

grant update on table "public"."student_deadline_extensions" to "anon";

grant delete on table "public"."student_deadline_extensions" to "authenticated";

grant insert on table "public"."student_deadline_extensions" to "authenticated";

grant references on table "public"."student_deadline_extensions" to "authenticated";

grant select on table "public"."student_deadline_extensions" to "authenticated";

grant trigger on table "public"."student_deadline_extensions" to "authenticated";

grant truncate on table "public"."student_deadline_extensions" to "authenticated";

grant update on table "public"."student_deadline_extensions" to "authenticated";

grant delete on table "public"."student_deadline_extensions" to "service_role";

grant insert on table "public"."student_deadline_extensions" to "service_role";

grant references on table "public"."student_deadline_extensions" to "service_role";

grant select on table "public"."student_deadline_extensions" to "service_role";

grant trigger on table "public"."student_deadline_extensions" to "service_role";

grant truncate on table "public"."student_deadline_extensions" to "service_role";

grant update on table "public"."student_deadline_extensions" to "service_role";

create policy "Instructors can CRUD"
on "public"."student_deadline_extensions"
as permissive
for all
to authenticated
using (authorizeforclassinstructor(class_id))
with check (authorizeforclassinstructor(class_id));



