create table "public"."help_request_feedback" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "thumbs_up" boolean not null,
    "comment" text,
    "class_id" bigint not null,
    "help_request_id" bigint not null,
    "student_profile_id" uuid not null
);


alter table "public"."help_request_feedback" enable row level security;

CREATE UNIQUE INDEX help_request_feedback_pkey ON public.help_request_feedback USING btree (id);

alter table "public"."help_request_feedback" add constraint "help_request_feedback_pkey" PRIMARY KEY using index "help_request_feedback_pkey";

alter table "public"."help_request_feedback" add constraint "help_request_feedback_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."help_request_feedback" validate constraint "help_request_feedback_class_id_fkey";

alter table "public"."help_request_feedback" add constraint "help_request_feedback_help_request_id_fkey" FOREIGN KEY (help_request_id) REFERENCES help_requests(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."help_request_feedback" validate constraint "help_request_feedback_help_request_id_fkey";

alter table "public"."help_request_feedback" add constraint "help_request_feedback_student_profile_id_fkey" FOREIGN KEY (student_profile_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."help_request_feedback" validate constraint "help_request_feedback_student_profile_id_fkey";

grant delete on table "public"."help_request_feedback" to "anon";

grant insert on table "public"."help_request_feedback" to "anon";

grant references on table "public"."help_request_feedback" to "anon";

grant select on table "public"."help_request_feedback" to "anon";

grant trigger on table "public"."help_request_feedback" to "anon";

grant truncate on table "public"."help_request_feedback" to "anon";

grant update on table "public"."help_request_feedback" to "anon";

grant delete on table "public"."help_request_feedback" to "authenticated";

grant insert on table "public"."help_request_feedback" to "authenticated";

grant references on table "public"."help_request_feedback" to "authenticated";

grant select on table "public"."help_request_feedback" to "authenticated";

grant trigger on table "public"."help_request_feedback" to "authenticated";

grant truncate on table "public"."help_request_feedback" to "authenticated";

grant update on table "public"."help_request_feedback" to "authenticated";

grant delete on table "public"."help_request_feedback" to "service_role";

grant insert on table "public"."help_request_feedback" to "service_role";

grant references on table "public"."help_request_feedback" to "service_role";

grant select on table "public"."help_request_feedback" to "service_role";

grant trigger on table "public"."help_request_feedback" to "service_role";

grant truncate on table "public"."help_request_feedback" to "service_role";

grant update on table "public"."help_request_feedback" to "service_role";

create policy "Instructors can view"
on "public"."help_request_feedback"
as permissive
for select
to authenticated
using (authorizeforclassinstructor(class_id));


create policy "Students associated with the help request can create"  
on "public"."help_request_feedback"
as permissive
for insert
to authenticated
with check (
  user_is_in_help_request(help_request_id)
);

-- This is for getting around the fact that Supabase sends the data back and if they can't read it, it throws an RLS error.
create policy "students can view the feedback they submitted"  
on "public"."help_request_feedback"
as permissive
for select
to authenticated
using (
  authorizeforprofile(student_profile_id)
);


-- Add trigger for realtime broadcasts
CREATE TRIGGER broadcast_help_request_feedback_change 
AFTER INSERT OR DELETE OR UPDATE ON public.help_request_feedback 
FOR EACH ROW EXECUTE FUNCTION broadcast_help_request_data_change();

