create table "public"."student_deadline_extensions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "student_id" uuid not null,
    "class_id" bigint not null,
    "hours" integer not null,
    "includes_lab" boolean not null,
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."student_deadline_extensions" enable row level security;

CREATE UNIQUE INDEX student_deadline_extensions_pkey ON public.student_deadline_extensions USING btree (id);

CREATE UNIQUE INDEX student_deadline_extensions_unique_student_class ON public.student_deadline_extensions USING btree (student_id, class_id);

alter table "public"."student_deadline_extensions" add constraint "student_deadline_extensions_pkey" PRIMARY KEY using index "student_deadline_extensions_pkey";

alter table "public"."student_deadline_extensions" add constraint "student_deadline_extensions_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."student_deadline_extensions" validate constraint "student_deadline_extensions_class_id_fkey";

alter table "public"."student_deadline_extensions" add constraint "student_deadline_extensions_student_id_fkey" FOREIGN KEY (student_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."student_deadline_extensions" validate constraint "student_deadline_extensions_student_id_fkey";

alter table "public"."student_deadline_extensions" add constraint "student_deadline_extensions_unique_student_class" UNIQUE using index "student_deadline_extensions_unique_student_class";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.apply_extensions_to_new_assignment()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
    -- Only proceed if this is a regular assignment or a lab assignment with extensions that include labs
    INSERT INTO assignment_due_date_exceptions (
        assignment_id,
        student_id,
        class_id,
        creator_id,
        hours,
        minutes,
        tokens_consumed,
        note
    )
    SELECT 
        NEW.id,
        sde.student_id,
        NEW.class_id,
        auth.uid(),
        sde.hours,
        0,
        0,
        'Class-wide extension automatically applied'
    FROM student_deadline_extensions sde
    WHERE sde.class_id = NEW.class_id
        -- Apply if it includes labs OR if this isn't a lab assignment
        AND (sde.includes_lab = true OR NEW.minutes_due_after_lab IS NULL);
    
    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.create_assignment_exceptions_from_extension()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
    -- Insert exceptions for all assignments in the class
    -- Skip lab assignments if includes_lab is false
    INSERT INTO assignment_due_date_exceptions (
        assignment_id,
        student_id,
        class_id,
        creator_id,
        hours,
        minutes,
        tokens_consumed,
        note
    )
    SELECT 
        a.id,
        NEW.student_id,
        NEW.class_id,
        auth.uid(), -- Current user as creator
        NEW.hours,
        0, -- No additional minutes
        0, -- No tokens consumed for instructor-granted extensions
        'Class-wide extension applied by instructor'
    FROM assignments a
    WHERE a.class_id = NEW.class_id
        AND a.archived_at IS NULL
        -- Skip lab assignments if includes_lab is false
        AND (NEW.includes_lab = true OR a.minutes_due_after_lab IS NULL)
        -- Don't create duplicate exceptions
        AND NOT EXISTS (
            SELECT 1 FROM assignment_due_date_exceptions ade
            WHERE ade.assignment_id = a.id
                AND ade.student_id = NEW.student_id
        );
    
    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.gift_tokens_to_student(p_student_id uuid, p_class_id bigint, p_assignment_id bigint, p_tokens_to_gift integer, p_note text DEFAULT 'Tokens gifted by instructor'::text)
 RETURNS void
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
    -- Verify instructor authorization
    IF NOT authorizeforclassinstructor(p_class_id) THEN
        RAISE EXCEPTION 'Unauthorized: Only instructors can gift tokens';
    END IF;
    
    -- Create a negative token consumption entry
    INSERT INTO assignment_due_date_exceptions (
        assignment_id,
        student_id,
        class_id,
        creator_id,
        hours,
        minutes,
        tokens_consumed,
        note
    )
    VALUES (
        p_assignment_id,
        p_student_id,
        p_class_id,
        auth.uid(),
        0,
        0,
        -p_tokens_to_gift, -- Negative value represents gifted tokens
        p_note
    );
END;
$function$
;

grant delete on table "public"."student_deadline_extensions" to "anon";

grant insert on table "public"."student_deadline_extensions" to "anon";

grant references on table "public"."student_deadline_extensions" to "anon";

grant select on table "public"."student_deadline_extensions" to "anon";

grant trigger on table "public"."student_deadline_extensions" to "anon";

grant truncate on table "public"."student_deadline_extensions" to "anon";

grant update on table "public"."student_deadline_extensions" to "anon";

grant delete on table "public"."student_deadline_extensions" to "authenticated";

grant insert on table "public"."student_deadline_extensions" to "authenticated";

grant references on table "public"."student_deadline_extensions" to "authenticated";

grant select on table "public"."student_deadline_extensions" to "authenticated";

grant trigger on table "public"."student_deadline_extensions" to "authenticated";

grant truncate on table "public"."student_deadline_extensions" to "authenticated";

grant update on table "public"."student_deadline_extensions" to "authenticated";

grant delete on table "public"."student_deadline_extensions" to "service_role";

grant insert on table "public"."student_deadline_extensions" to "service_role";

grant references on table "public"."student_deadline_extensions" to "service_role";

grant select on table "public"."student_deadline_extensions" to "service_role";

grant trigger on table "public"."student_deadline_extensions" to "service_role";

grant truncate on table "public"."student_deadline_extensions" to "service_role";

grant update on table "public"."student_deadline_extensions" to "service_role";

create policy "Course staff can CRUD"
on "public"."student_deadline_extensions"
as permissive
for all
to authenticated
using (authorizeforclassgrader(class_id))
with check (authorizeforclassgrader(class_id));


CREATE TRIGGER on_assignment_created_apply_extensions AFTER INSERT ON public.assignments FOR EACH ROW EXECUTE FUNCTION apply_extensions_to_new_assignment();

CREATE TRIGGER on_student_deadline_extension_created AFTER INSERT ON public.student_deadline_extensions FOR EACH ROW EXECUTE FUNCTION create_assignment_exceptions_from_extension();


