drop policy "instructors can delete, inviter can delete, invitee can delete" on "public"."assignment_group_invitations";

drop policy "instructors view all, invitee views own, group members view own" on "public"."assignment_group_invitations";

drop policy "read assignments in own class regardless of release date" on "public"."assignments";

drop policy "self updates, or instructor" on "public"."discussion_threads";

drop policy "students view all non-private in their class, instructors view " on "public"."discussion_threads";

drop policy "visible to instructors always, and self conditionally" on "public"."grader_result_output";

drop policy "visible to instructors and self" on "public"."grader_result_tests";

drop policy "visible to instructors and self" on "public"."grader_results";

drop policy "Instructors can do anything" on "public"."help_queues";

drop policy "instructors view all, students view own" on "public"."help_request_messages";

drop policy "instructors can update" on "public"."help_requests";

drop policy "students view own, instructors view all" on "public"."help_requests";

drop policy "instructors and students can view" on "public"."repositories";

drop policy "instructors CRUD" on "public"."rubrics";

drop policy "can only insert comments as self, for own files (instructors ca" on "public"."submission_file_comments";

drop policy "students view own, instructors view all" on "public"."submission_file_comments";

drop policy "instructors view all, students own" on "public"."submission_files";

drop policy "Instructors can view all submissions in class, students can vie" on "public"."submissions";

drop policy "view own, instructors also view all that they instruct" on "public"."users";

alter table "public"."submission_file_comments" drop constraint "submission_file_lcomments_submission_files_id_fkey";

alter table "public"."submission_file_comments" drop constraint "submission_file_lcomments_submissions_id_fkey";

alter table "public"."submission_files" drop constraint "submission_files_submissions_id_fkey";

drop function if exists "public"."authorizeforinstructorofstudent"(user_id bigint);

drop index if exists "public"."submission_files_submissions_id_idx";

create table "public"."audit" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "class_id" bigint not null,
    "user_id" uuid,
    "table" text not null,
    "old" jsonb,
    "new" jsonb not null,
    "ip_addr" text not null
);


alter table "public"."audit" enable row level security;

create table "public"."calculated_score" (
    "sum" numeric
);


create table "public"."rubric_checks" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "rubric_criteria_id" bigint not null,
    "name" text not null,
    "description" text,
    "group" text,
    "ordinal" bigint not null,
    "file" text,
    "is_annotation" boolean not null,
    "max_annotations" bigint,
    "points" integer not null,
    "allow_other_points" boolean not null,
    "is_comment_required" boolean not null,
    "class_id" bigint not null
);


alter table "public"."rubric_checks" enable row level security;

create table "public"."rubric_criteria" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "rubric_id" bigint not null,
    "name" text not null,
    "description" text,
    "total_points" bigint not null,
    "is_additive" boolean not null,
    "class_id" bigint not null,
    "max_checks_per_submission" integer,
    "min_checks_per_submission" integer
);


alter table "public"."rubric_criteria" enable row level security;

create table "public"."submission_comments" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "submission_id" bigint not null,
    "author" uuid not null,
    "comment" text not null,
    "points" integer,
    "class_id" bigint not null,
    "released" boolean not null default false,
    "rubric_check_id" bigint,
    "edited_by" uuid,
    "edited_at" timestamp with time zone,
    "deleted_at" timestamp with time zone,
    "submission_review_id" bigint
);


alter table "public"."submission_comments" enable row level security;

create table "public"."submission_reviews" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "grader" uuid,
    "meta_grader" uuid,
    "total_score" integer not null,
    "released" boolean not null default false,
    "tweak" integer not null,
    "class_id" bigint not null,
    "completed_by" uuid,
    "completed_at" timestamp with time zone,
    "submission_id" bigint not null,
    "name" text not null,
    "checked_at" timestamp with time zone,
    "checked_by" uuid,
    "rubric_id" bigint not null
);


alter table "public"."submission_reviews" enable row level security;

alter table "public"."assignments" add column "archived_at" timestamp with time zone;

alter table "public"."assignments" add column "autograder_points" bigint;

alter table "public"."assignments" add column "grading_rubric_id" bigint;

alter table "public"."rubrics" drop column "deduction";

alter table "public"."rubrics" drop column "ordinal";

alter table "public"."rubrics" add column "description" text;

alter table "public"."rubrics" alter column "class_id" set not null;

alter table "public"."rubrics" alter column "name" set not null;

alter table "public"."submission_file_comments" drop column "deduction";

alter table "public"."submission_file_comments" drop column "submission_files_id";

alter table "public"."submission_file_comments" drop column "submissions_id";

alter table "public"."submission_file_comments" add column "deleted_at" timestamp with time zone;

alter table "public"."submission_file_comments" add column "edited_at" timestamp with time zone;

alter table "public"."submission_file_comments" add column "edited_by" uuid;

alter table "public"."submission_file_comments" add column "points" integer;

alter table "public"."submission_file_comments" add column "released" boolean not null default false;

alter table "public"."submission_file_comments" add column "rubric_check_id" bigint;

alter table "public"."submission_file_comments" add column "submission_file_id" bigint not null;

alter table "public"."submission_file_comments" add column "submission_id" bigint not null;

alter table "public"."submission_file_comments" add column "submission_review_id" bigint;

alter table "public"."submission_files" drop column "submissions_id";

alter table "public"."submission_files" add column "submission_id" bigint not null;

alter table "public"."submissions" add column "grading_review_id" bigint;

CREATE UNIQUE INDEX audit_pkey ON public.audit USING btree (id);

CREATE UNIQUE INDEX rubric_checks_pkey ON public.rubric_checks USING btree (id);

CREATE UNIQUE INDEX rubric_criteria_pkey ON public.rubric_criteria USING btree (id);

CREATE UNIQUE INDEX submission_comments_pkey ON public.submission_comments USING btree (id);

CREATE UNIQUE INDEX submission_reviews_pkey ON public.submission_reviews USING btree (id);

CREATE INDEX submission_files_submissions_id_idx ON public.submission_files USING hash (submission_id);

alter table "public"."audit" add constraint "audit_pkey" PRIMARY KEY using index "audit_pkey";

alter table "public"."rubric_checks" add constraint "rubric_checks_pkey" PRIMARY KEY using index "rubric_checks_pkey";

alter table "public"."rubric_criteria" add constraint "rubric_criteria_pkey" PRIMARY KEY using index "rubric_criteria_pkey";

alter table "public"."submission_comments" add constraint "submission_comments_pkey" PRIMARY KEY using index "submission_comments_pkey";

alter table "public"."submission_reviews" add constraint "submission_reviews_pkey" PRIMARY KEY using index "submission_reviews_pkey";

alter table "public"."assignments" add constraint "assignments_rubric_id_fkey" FOREIGN KEY (grading_rubric_id) REFERENCES rubrics(id) not valid;

alter table "public"."assignments" validate constraint "assignments_rubric_id_fkey";

alter table "public"."audit" add constraint "audit_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(user_id) not valid;

alter table "public"."audit" validate constraint "audit_user_id_fkey";

alter table "public"."rubric_checks" add constraint "rubric_checks_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) not valid;

alter table "public"."rubric_checks" validate constraint "rubric_checks_class_id_fkey";

alter table "public"."rubric_checks" add constraint "rubric_checks_rubric_criteria_id_fkey" FOREIGN KEY (rubric_criteria_id) REFERENCES rubric_criteria(id) not valid;

alter table "public"."rubric_checks" validate constraint "rubric_checks_rubric_criteria_id_fkey";

alter table "public"."rubric_criteria" add constraint "rubric_criteria_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) not valid;

alter table "public"."rubric_criteria" validate constraint "rubric_criteria_class_id_fkey";

alter table "public"."rubric_criteria" add constraint "rubric_criteria_rubric_id_fkey" FOREIGN KEY (rubric_id) REFERENCES rubrics(id) not valid;

alter table "public"."rubric_criteria" validate constraint "rubric_criteria_rubric_id_fkey";

alter table "public"."submission_comments" add constraint "submission_comments_author_fkey" FOREIGN KEY (author) REFERENCES profiles(id) not valid;

alter table "public"."submission_comments" validate constraint "submission_comments_author_fkey";

alter table "public"."submission_comments" add constraint "submission_comments_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) not valid;

alter table "public"."submission_comments" validate constraint "submission_comments_class_id_fkey";

alter table "public"."submission_comments" add constraint "submission_comments_rubric_check_id_fkey" FOREIGN KEY (rubric_check_id) REFERENCES rubric_checks(id) not valid;

alter table "public"."submission_comments" validate constraint "submission_comments_rubric_check_id_fkey";

alter table "public"."submission_comments" add constraint "submission_comments_submission_review_id_fkey" FOREIGN KEY (submission_review_id) REFERENCES submission_reviews(id) not valid;

alter table "public"."submission_comments" validate constraint "submission_comments_submission_review_id_fkey";

alter table "public"."submission_comments" add constraint "submission_comments_submissions_id_fkey" FOREIGN KEY (submission_id) REFERENCES submissions(id) not valid;

alter table "public"."submission_comments" validate constraint "submission_comments_submissions_id_fkey";

alter table "public"."submission_file_comments" add constraint "submission_file_comments_rubric_check_id_fkey" FOREIGN KEY (rubric_check_id) REFERENCES rubric_checks(id) not valid;

alter table "public"."submission_file_comments" validate constraint "submission_file_comments_rubric_check_id_fkey";

alter table "public"."submission_file_comments" add constraint "submission_file_comments_submission_review_id_fkey" FOREIGN KEY (submission_review_id) REFERENCES submission_reviews(id) not valid;

alter table "public"."submission_file_comments" validate constraint "submission_file_comments_submission_review_id_fkey";

alter table "public"."submission_reviews" add constraint "submission_reviews_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) not valid;

alter table "public"."submission_reviews" validate constraint "submission_reviews_class_id_fkey";

alter table "public"."submission_reviews" add constraint "submission_reviews_completed_by_fkey" FOREIGN KEY (completed_by) REFERENCES profiles(id) not valid;

alter table "public"."submission_reviews" validate constraint "submission_reviews_completed_by_fkey";

alter table "public"."submission_reviews" add constraint "submission_reviews_grader_fkey" FOREIGN KEY (grader) REFERENCES profiles(id) not valid;

alter table "public"."submission_reviews" validate constraint "submission_reviews_grader_fkey";

alter table "public"."submission_reviews" add constraint "submission_reviews_meta_grader_fkey" FOREIGN KEY (meta_grader) REFERENCES profiles(id) not valid;

alter table "public"."submission_reviews" validate constraint "submission_reviews_meta_grader_fkey";

alter table "public"."submission_reviews" add constraint "submission_reviews_rubric_id_fkey" FOREIGN KEY (rubric_id) REFERENCES rubrics(id) not valid;

alter table "public"."submission_reviews" validate constraint "submission_reviews_rubric_id_fkey";

alter table "public"."submission_reviews" add constraint "submission_reviews_submission_id_fkey" FOREIGN KEY (submission_id) REFERENCES submissions(id) not valid;

alter table "public"."submission_reviews" validate constraint "submission_reviews_submission_id_fkey";

alter table "public"."submissions" add constraint "submissions_grading_review_id_fkey" FOREIGN KEY (grading_review_id) REFERENCES submission_reviews(id) not valid;

alter table "public"."submissions" validate constraint "submissions_grading_review_id_fkey";

alter table "public"."submission_file_comments" add constraint "submission_file_lcomments_submission_files_id_fkey" FOREIGN KEY (submission_file_id) REFERENCES submission_files(id) not valid;

alter table "public"."submission_file_comments" validate constraint "submission_file_lcomments_submission_files_id_fkey";

alter table "public"."submission_file_comments" add constraint "submission_file_lcomments_submissions_id_fkey" FOREIGN KEY (submission_id) REFERENCES submissions(id) not valid;

alter table "public"."submission_file_comments" validate constraint "submission_file_lcomments_submissions_id_fkey";

alter table "public"."submission_files" add constraint "submission_files_submissions_id_fkey" FOREIGN KEY (submission_id) REFERENCES submissions(id) not valid;

alter table "public"."submission_files" validate constraint "submission_files_submissions_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.audit_insert_and_update()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
    declare
      remote_ip text;
BEGIN
SELECT split_part(
  current_setting('request.headers', true)::json->>'x-forwarded-for',
  ',', 1) into remote_ip;
   CASE TG_OP
   WHEN 'UPDATE' THEN
      INSERT INTO audit (class_id,user_id,"table",old,new, ip_addr) values
      (NEW.class_id,
      auth.uid(),
      TG_TABLE_NAME,
      row_to_json(OLD.*),
      row_to_json(NEW.*),
      remote_ip
      );
      RETURN NULL;
   WHEN 'INSERT' THEN
      INSERT INTO audit (class_id,user_id,"table",old,new, ip_addr) values
      (NEW.class_id,
      auth.uid(),
      TG_TABLE_NAME,
      NULL,
      row_to_json(NEW.*),
      remote_ip
      );
      RETURN NULL;
   ELSE
      RAISE EXCEPTION 'Unexpected TG_OP: "%". Should not occur!', TG_OP;
   END CASE;
   
END;
$function$
;

CREATE OR REPLACE FUNCTION public.authorize_for_submission(requested_submission_id bigint)
 RETURNS boolean
 LANGUAGE plpgsql
 STABLE SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  bind_permissions int;
  jwtRoles public.user_roles;
begin
  -- check for direct ownership of assignment
    select count(*)
    into bind_permissions
    from public.submissions as s
    inner join public.user_roles as r on r.private_profile_id=s.profile_id
    where r.user_id=auth.uid();

    if bind_permissions > 0 then
      return true;
    end if;

  -- check through assignment groups
    select count(*)
    into bind_permissions
    from public.submissions as s
    inner join public.assignment_groups_members mem on mem.assignment_group_id=s.assignment_group_id
    inner join public.user_roles as r on r.private_profile_id=mem.profile_id
    where r.user_id=auth.uid();
    if bind_permissions > 0 then
      return true;
    end if;

  return false;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.authorize_for_submission_reviewable(requested_submission_id bigint, requested_submission_review_id bigint)
 RETURNS boolean
 LANGUAGE plpgsql
 STABLE SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  bind_permissions int;
  jwtRoles public.user_roles;
begin
  if requested_submission_review_id is null then
  -- check for direct ownership of assignment
    select count(*)
    into bind_permissions
    from public.submissions as s
    inner join public.user_roles as r on r.private_profile_id=s.profile_id
    where r.user_id=auth.uid();
    if bind_permissions > 0 then
      return true;
    end if;

  -- check through assignment groups
    select count(*)
    into bind_permissions
    from public.submissions as s
    inner join public.assignment_groups_members mem on mem.assignment_group_id=s.assignment_group_id
    inner join public.user_roles as r on r.private_profile_id=mem.profile_id
    where r.user_id=auth.uid();
    if bind_permissions > 0 then
      return true;
    end if;
  else 
    -- check for direct ownership of assignment
    select count(*)
    into bind_permissions
    from public.submission_reviews as review
    inner join public.submissions as s on s.id=r.submission_id
    inner join public.user_roles as r on r.private_profile_id=s.profile_id
    where r.user_id=auth.uid() and review.id=requested_submission_review_id and review.released;
    if bind_permissions > 0 then
      return true;
    end if;

  -- check through assignment groups
    select count(*)
    into bind_permissions
    from public.submission_reviews as review
    inner join public.submissions as s on s.id=r.submission_id
    inner join public.assignment_groups_members mem on mem.assignment_group_id=s.assignment_group_id
    inner join public.user_roles as r on r.private_profile_id=mem.profile_id
    where r.user_id=auth.uid() and review.id=requested_submission_review_id  and review.released;
    if bind_permissions > 0 then
      return true;
    end if;
  end if;

  return false;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.authorizeforclassgrader(class__id bigint)
 RETURNS boolean
 LANGUAGE plpgsql
 STABLE SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  bind_permissions int;
  jwtRoles public.user_roles;
begin

  -- Fetch user role once and store it to reduce number of calls
  select count(*)
  into bind_permissions
  from public.user_roles as r
  where class_id=class__id and user_id=auth.uid() and (role='instructor' or role='grader');

  return bind_permissions > 0;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.authorizeforinstructororgraderofstudent(user_id uuid)
 RETURNS boolean
 LANGUAGE plpgsql
 STABLE SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  bind_permissions int;
  jwtRoles public.user_roles;
begin

  -- Fetch user role once and store it to reduce number of calls
  select count(*)
  into bind_permissions
  from public.user_roles as ourRole
  inner join public.user_roles as studentRole on ourRole.class_id=studentRole.class_id and studentRole.user_id=user_id
  where ourRole.user_id=auth.uid() and (ourRole.role='instructor' or ourRole.role='grader');

  return bind_permissions > 0;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.submissionreviewrecompute()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
  calculated_score int;
  the_submission submissions%ROWTYPE;
  existing_submission_review_id int8;
begin
  if 'rubric_check_id' = any(select jsonb_object_keys(to_jsonb(new))) then 
    if  NEW.rubric_check_id is null and (OLD is null OR OLD.rubric_check_id is null) then 
     return NEW;
    end if;
  end if;

  if 'submission_review_id' = any(select jsonb_object_keys(to_jsonb(new))) then 
    -- If the field is there but null, we don't have anything to update.
    if NEW.submission_review_id is null then
      return NEW;
    end if;
    -- The submission review we are calculating is the one on the row
    existing_submission_review_id = NEW.submission_review_id;
  else
    -- The submission review we are calculating is the one on the assignment, make sure it exists
    select * into the_submission from public.submissions where id=NEW.submission_id;
    if the_submission.submission_review_id is null then
      INSERT INTO submission_reviews (total_score,tweak, class_id, submission_id, name) VALUES(0,0, the_submission.class_id, the_submission.id, 'Grading') RETURNING id into existing_submission_review_id;
      UPDATE public.submissions set submission_review_id=existing_submission_review_id where id=the_submission.id;
    else
      existing_submission_review_id = the_submission.submission_review_id;
    end if;
  end if;


  select sum(score) into calculated_score from (select c.id,c.name,
  case
    when c.is_additive then LEAST(sum(sfc.points),c.total_points)
    else GREATEST(c.total_points - sum(sfc.points), 0)
  end as score
  from public.submission_file_comments sfc
  inner join public.rubric_checks ch on ch.id=sfc.rubric_check_id
  inner join public.rubric_criteria c on c.id=ch.rubric_criteria_id
  where sfc.submission_review_id=existing_submission_review_id and sfc.deleted_at is null group by c.id

  union
  select -1 as id, 'autograder' as name, r.score from grader_results r where r.submission_id=NEW.submission_id
  union
  select c.id,c.name,
  case
    when c.is_additive then LEAST(sum(sfc.points),c.total_points)
    else GREATEST(c.total_points - sum(sfc.points), 0)
    end as score
  from public.submission_comments sfc
  inner join public.rubric_checks ch on ch.id=sfc.rubric_check_id
  inner join public.rubric_criteria c on c.id=ch.rubric_criteria_id
  where sfc.submission_review_id=existing_submission_review_id and sfc.deleted_at is null group by c.id


  ) as combo;

  UPDATE public.submission_reviews SET total_score=calculated_score WHERE id=existing_submission_review_id;

  return NEW;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.submissionreviewreleasecascade()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
RAISE NOTICE 'id is currently %', NEW.id;       -- either this
RAISE NOTICE 'released is currently %', NEW.released;       -- either this

if NEW.released != OLD.released then
  UPDATE public.submission_file_comments set released=NEW.released WHERE submission_review_id=NEW.id;
  UPDATE public.submission_comments set released=NEW.released WHERE submission_review_id=NEW.id;
end if;
return NEW;
end;
$function$
;

grant delete on table "public"."audit" to "anon";

grant insert on table "public"."audit" to "anon";

grant references on table "public"."audit" to "anon";

grant select on table "public"."audit" to "anon";

grant trigger on table "public"."audit" to "anon";

grant truncate on table "public"."audit" to "anon";

grant update on table "public"."audit" to "anon";

grant delete on table "public"."audit" to "authenticated";

grant insert on table "public"."audit" to "authenticated";

grant references on table "public"."audit" to "authenticated";

grant select on table "public"."audit" to "authenticated";

grant trigger on table "public"."audit" to "authenticated";

grant truncate on table "public"."audit" to "authenticated";

grant update on table "public"."audit" to "authenticated";

grant delete on table "public"."audit" to "service_role";

grant insert on table "public"."audit" to "service_role";

grant references on table "public"."audit" to "service_role";

grant select on table "public"."audit" to "service_role";

grant trigger on table "public"."audit" to "service_role";

grant truncate on table "public"."audit" to "service_role";

grant update on table "public"."audit" to "service_role";

grant delete on table "public"."calculated_score" to "anon";

grant insert on table "public"."calculated_score" to "anon";

grant references on table "public"."calculated_score" to "anon";

grant select on table "public"."calculated_score" to "anon";

grant trigger on table "public"."calculated_score" to "anon";

grant truncate on table "public"."calculated_score" to "anon";

grant update on table "public"."calculated_score" to "anon";

grant delete on table "public"."calculated_score" to "authenticated";

grant insert on table "public"."calculated_score" to "authenticated";

grant references on table "public"."calculated_score" to "authenticated";

grant select on table "public"."calculated_score" to "authenticated";

grant trigger on table "public"."calculated_score" to "authenticated";

grant truncate on table "public"."calculated_score" to "authenticated";

grant update on table "public"."calculated_score" to "authenticated";

grant delete on table "public"."calculated_score" to "service_role";

grant insert on table "public"."calculated_score" to "service_role";

grant references on table "public"."calculated_score" to "service_role";

grant select on table "public"."calculated_score" to "service_role";

grant trigger on table "public"."calculated_score" to "service_role";

grant truncate on table "public"."calculated_score" to "service_role";

grant update on table "public"."calculated_score" to "service_role";

grant delete on table "public"."rubric_checks" to "anon";

grant insert on table "public"."rubric_checks" to "anon";

grant references on table "public"."rubric_checks" to "anon";

grant select on table "public"."rubric_checks" to "anon";

grant trigger on table "public"."rubric_checks" to "anon";

grant truncate on table "public"."rubric_checks" to "anon";

grant update on table "public"."rubric_checks" to "anon";

grant delete on table "public"."rubric_checks" to "authenticated";

grant insert on table "public"."rubric_checks" to "authenticated";

grant references on table "public"."rubric_checks" to "authenticated";

grant select on table "public"."rubric_checks" to "authenticated";

grant trigger on table "public"."rubric_checks" to "authenticated";

grant truncate on table "public"."rubric_checks" to "authenticated";

grant update on table "public"."rubric_checks" to "authenticated";

grant delete on table "public"."rubric_checks" to "service_role";

grant insert on table "public"."rubric_checks" to "service_role";

grant references on table "public"."rubric_checks" to "service_role";

grant select on table "public"."rubric_checks" to "service_role";

grant trigger on table "public"."rubric_checks" to "service_role";

grant truncate on table "public"."rubric_checks" to "service_role";

grant update on table "public"."rubric_checks" to "service_role";

grant delete on table "public"."rubric_criteria" to "anon";

grant insert on table "public"."rubric_criteria" to "anon";

grant references on table "public"."rubric_criteria" to "anon";

grant select on table "public"."rubric_criteria" to "anon";

grant trigger on table "public"."rubric_criteria" to "anon";

grant truncate on table "public"."rubric_criteria" to "anon";

grant update on table "public"."rubric_criteria" to "anon";

grant delete on table "public"."rubric_criteria" to "authenticated";

grant insert on table "public"."rubric_criteria" to "authenticated";

grant references on table "public"."rubric_criteria" to "authenticated";

grant select on table "public"."rubric_criteria" to "authenticated";

grant trigger on table "public"."rubric_criteria" to "authenticated";

grant truncate on table "public"."rubric_criteria" to "authenticated";

grant update on table "public"."rubric_criteria" to "authenticated";

grant delete on table "public"."rubric_criteria" to "service_role";

grant insert on table "public"."rubric_criteria" to "service_role";

grant references on table "public"."rubric_criteria" to "service_role";

grant select on table "public"."rubric_criteria" to "service_role";

grant trigger on table "public"."rubric_criteria" to "service_role";

grant truncate on table "public"."rubric_criteria" to "service_role";

grant update on table "public"."rubric_criteria" to "service_role";

grant delete on table "public"."submission_comments" to "anon";

grant insert on table "public"."submission_comments" to "anon";

grant references on table "public"."submission_comments" to "anon";

grant select on table "public"."submission_comments" to "anon";

grant trigger on table "public"."submission_comments" to "anon";

grant truncate on table "public"."submission_comments" to "anon";

grant update on table "public"."submission_comments" to "anon";

grant delete on table "public"."submission_comments" to "authenticated";

grant insert on table "public"."submission_comments" to "authenticated";

grant references on table "public"."submission_comments" to "authenticated";

grant select on table "public"."submission_comments" to "authenticated";

grant trigger on table "public"."submission_comments" to "authenticated";

grant truncate on table "public"."submission_comments" to "authenticated";

grant update on table "public"."submission_comments" to "authenticated";

grant delete on table "public"."submission_comments" to "service_role";

grant insert on table "public"."submission_comments" to "service_role";

grant references on table "public"."submission_comments" to "service_role";

grant select on table "public"."submission_comments" to "service_role";

grant trigger on table "public"."submission_comments" to "service_role";

grant truncate on table "public"."submission_comments" to "service_role";

grant update on table "public"."submission_comments" to "service_role";

grant delete on table "public"."submission_reviews" to "anon";

grant insert on table "public"."submission_reviews" to "anon";

grant references on table "public"."submission_reviews" to "anon";

grant select on table "public"."submission_reviews" to "anon";

grant trigger on table "public"."submission_reviews" to "anon";

grant truncate on table "public"."submission_reviews" to "anon";

grant update on table "public"."submission_reviews" to "anon";

grant delete on table "public"."submission_reviews" to "authenticated";

grant insert on table "public"."submission_reviews" to "authenticated";

grant references on table "public"."submission_reviews" to "authenticated";

grant select on table "public"."submission_reviews" to "authenticated";

grant trigger on table "public"."submission_reviews" to "authenticated";

grant truncate on table "public"."submission_reviews" to "authenticated";

grant update on table "public"."submission_reviews" to "authenticated";

grant delete on table "public"."submission_reviews" to "service_role";

grant insert on table "public"."submission_reviews" to "service_role";

grant references on table "public"."submission_reviews" to "service_role";

grant select on table "public"."submission_reviews" to "service_role";

grant trigger on table "public"."submission_reviews" to "service_role";

grant truncate on table "public"."submission_reviews" to "service_role";

grant update on table "public"."submission_reviews" to "service_role";

create policy "graders and instructors can delete, inviter can delete, invitee"
on "public"."assignment_group_invitations"
as permissive
for delete
to public
using ((authorizeforclassgrader(class_id) OR authorizeforprofile(invitee) OR authorizeforprofile(inviter)));


create policy "instructors and graders view all, invitee views own, group memb"
on "public"."assignment_group_invitations"
as permissive
for select
to public
using ((authorizeforprofile(invitee) OR authorizeforclassgrader(class_id) OR authorizeforassignmentgroup(assignment_group_id)));


create policy "read assignments in own class if released or grader or instruct"
on "public"."assignments"
as permissive
for select
to public
using ((authorizeforclassgrader(class_id) OR (authorizeforclass(class_id) AND (release_date < now()) AND (archived_at IS NULL))));


create policy "self updates, or instructor or grader"
on "public"."discussion_threads"
as permissive
for update
to public
using ((authorizeforclassgrader(class_id) OR authorizeforprofile(author)));


create policy "students view all non-private in their class, instructors and g"
on "public"."discussion_threads"
as permissive
for select
to public
using (((authorizeforclass(class_id) AND (instructors_only = false)) OR authorizeforclassgrader(class_id) OR authorizeforprofile(author)));


create policy "visible to instructors and graders always, and self conditional"
on "public"."grader_result_output"
as permissive
for select
to public
using ((authorizeforclassgrader(class_id) OR ((authorizeforprofile(student_id) OR authorizeforassignmentgroup(assignment_group_id)) AND (visibility = 'visible'::feedback_visibility))));


create policy "visible to instructors graders and self"
on "public"."grader_result_tests"
as permissive
for select
to public
using ((authorizeforclassgrader(class_id) OR authorizeforprofile(student_id) OR authorizeforassignmentgroup(assignment_group_id)));


create policy "visible to instructors graders and self"
on "public"."grader_results"
as permissive
for select
to public
using ((authorizeforclassgrader(class_id) OR authorizeforprofile(profile_id) OR authorizeforassignmentgroup(assignment_group_id)));


create policy "Instructors and graders can do anything"
on "public"."help_queues"
as permissive
for all
to public
using (authorizeforclassgrader(class_id));


create policy "instructors and graders view all, students view own"
on "public"."help_request_messages"
as permissive
for select
to public
using ((authorizeforclassgrader(class_id) OR authorizeforprofile(author) OR authorizeforprofile(requestor)));


create policy "instructors and graders can update"
on "public"."help_requests"
as permissive
for update
to public
using (authorizeforclassgrader(class_id));


create policy "students view own, instructors and graders view all"
on "public"."help_requests"
as permissive
for select
to public
using ((authorizeforclassgrader(class_id) OR authorizeforprofile(creator)));


create policy "instructors graders and students can view"
on "public"."repositories"
as permissive
for select
to public
using ((authorizeforclassgrader(class_id) OR authorizeforprofile(profile_id) OR authorizeforassignmentgroup(assignment_group_id)));


create policy "authorizeforclass"
on "public"."rubric_checks"
as permissive
for select
to public
using (authorizeforclass(class_id));


create policy "authorizeforclass"
on "public"."rubric_criteria"
as permissive
for select
to public
using (authorizeforclass(class_id));


create policy "authorizeforclass"
on "public"."rubrics"
as permissive
for select
to public
using (authorizeforclass(class_id));


create policy "instructors and graders CRUD"
on "public"."rubrics"
as permissive
for all
to public
using (authorizeforclassgrader(class_id));


create policy "Only graders and instructors can update"
on "public"."submission_comments"
as permissive
for update
to public
using (authorizeforclassgrader(class_id));


create policy "insert for self"
on "public"."submission_comments"
as permissive
for insert
to public
with check ((authorizeforprofile(author) AND (authorizeforclassgrader(class_id) OR (authorizeforclassgrader(class_id) OR ((submission_review_id IS NULL) AND authorize_for_submission(submission_id))))));


create policy "students view own, instructors and graders view all"
on "public"."submission_comments"
as permissive
for select
to public
using ((authorizeforclassgrader(class_id) OR (released AND authorize_for_submission(submission_id))));


create policy "Update self only"
on "public"."submission_file_comments"
as permissive
for update
to public
using (authorizeforprofile(author));


create policy "can only insert comments as self, for own files (instructors an"
on "public"."submission_file_comments"
as permissive
for insert
to public
with check ((authorizeforprofile(author) AND (authorizeforclassgrader(class_id) OR ((submission_review_id IS NULL) AND authorize_for_submission(submission_id)))));


create policy "students view own, instructors and graders view all"
on "public"."submission_file_comments"
as permissive
for select
to public
using ((authorizeforclassgrader(class_id) OR (released AND authorize_for_submission(submission_id))));


create policy "instructors and graders view all, students own"
on "public"."submission_files"
as permissive
for select
to public
using ((authorizeforclassgrader(class_id) OR authorizeforprofile(profile_id) OR authorizeforassignmentgroup(assignment_group_id)));


create policy "only instructors and graders can edit"
on "public"."submission_reviews"
as permissive
for update
to public
using (authorizeforclassgrader(class_id));


create policy "students read only their own if released, instructors and grade"
on "public"."submission_reviews"
as permissive
for select
to public
using ((authorizeforclassgrader(class_id) OR (released AND (authorizeforprofile(( SELECT submissions.profile_id
   FROM submissions
  WHERE ((submissions.id = submission_reviews.submission_id) AND (submissions.released IS NOT NULL)))) OR authorizeforassignmentgroup(( SELECT submissions.assignment_group_id
   FROM submissions
  WHERE ((submissions.id = submission_reviews.submission_id) AND (submissions.released IS NOT NULL))))))));


create policy "Instructors and graders can view all submissions in class, stud"
on "public"."submissions"
as permissive
for select
to public
using ((authorizeforclassgrader(class_id) OR authorizeforprofile(profile_id) OR authorizeforassignmentgroup(assignment_group_id)));


create policy "Instructors and graders update"
on "public"."submissions"
as permissive
for update
to public
using (authorizeforclassgrader(class_id));


create policy "view own, instructors and graders also view all that they instr"
on "public"."users"
as permissive
for select
to public
using (((user_id = auth.uid()) OR authorizeforinstructororgraderofstudent(user_id)));


CREATE TRIGGER audit_assignments_insert_update AFTER INSERT OR UPDATE ON public.assignments FOR EACH ROW EXECUTE FUNCTION audit_insert_and_update();
ALTER TABLE "public"."assignments" DISABLE TRIGGER "audit_assignments_insert_update";

CREATE TRIGGER grader_result_recalculate_submission_review AFTER INSERT OR UPDATE ON public.grader_results FOR EACH ROW EXECUTE FUNCTION submissionreviewrecompute();

CREATE TRIGGER submission_comment_recalculate_submission_review AFTER INSERT OR UPDATE ON public.submission_comments FOR EACH ROW EXECUTE FUNCTION submissionreviewrecompute();

CREATE TRIGGER audit_submission_file_comment_insert_update AFTER INSERT OR UPDATE ON public.submission_file_comments FOR EACH ROW EXECUTE FUNCTION audit_insert_and_update();
ALTER TABLE "public"."submission_file_comments" DISABLE TRIGGER "audit_submission_file_comment_insert_update";

CREATE TRIGGER submission_file_comment_recalculate_submission_review AFTER INSERT OR UPDATE ON public.submission_file_comments FOR EACH ROW EXECUTE FUNCTION submissionreviewrecompute();

CREATE TRIGGER submission_review_release AFTER UPDATE ON public.submission_reviews FOR EACH ROW EXECUTE FUNCTION submissionreviewreleasecascade();

CREATE TRIGGER audit_submissions_insert_update AFTER INSERT OR UPDATE ON public.submissions FOR EACH ROW EXECUTE FUNCTION audit_insert_and_update();
ALTER TABLE "public"."submissions" DISABLE TRIGGER "audit_submissions_insert_update";


