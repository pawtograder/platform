CREATE TABLE IF NOT EXISTS "public"."emails" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "subject" text not null,
    "body" text not null,
    "class_id" bigint not null,
    "assignment_id" bigint
);

CREATE TABLE IF NOT EXISTS "public"."email_recipients" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "email_id" bigint not null,
    "class_id" bigint not null,
    "subject" text,
    "body" text
);

ALTER TABLE "public"."emails" 
    ADD CONSTRAINT "emails_pkey" PRIMARY KEY ("id");

ALTER TABLE "public"."email_recipients" 
    ADD CONSTRAINT "email_recipients_item_pkey" PRIMARY KEY ("id");

ALTER TABLE "public"."emails" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."email_recipients" ENABLE ROW LEVEL SECURITY;

create policy "Instructors can view emails"
on "public"."emails"
as permissive
for select
to authenticated
using( authorizeforclassinstructor(class_id));

create policy "Instructors can create emails"
on "public"."emails"
as permissive
for insert
to authenticated
with check (authorizeforclassinstructor(class_id));

create policy "Instructors can update emails"
on "public"."emails"
as permissive
for update
to authenticated
using( authorizeforclassinstructor(class_id));

create policy "Instructors can delete emails"
on "public"."emails"
as permissive
for delete
to authenticated
using (authorizeforclassinstructor(class_id));

create policy "Instructors can view email_recipients"
on "public"."email_recipients"
as permissive
for select
to authenticated
using( authorizeforclassinstructor(class_id));

create policy "Instructors can create email_recipients"
on "public"."email_recipients"
as permissive
for insert
to authenticated
with check (authorizeforclassinstructor(class_id));

create policy "Instructors can update email_recipients"
on "public"."email_recipients"
as permissive
for update
to authenticated
using( authorizeforclassinstructor(class_id));

create policy "Instructors can delete email_recipients"
on "public"."email_recipients"
as permissive
for delete
to authenticated
using (authorizeforclassinstructor(class_id));

CREATE OR REPLACE FUNCTION "public"."email_notifications"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
DECLARE
   email public.emails%ROWTYPE;
   body_jsonb jsonb;
   subject_jsonb jsonb;
   assignment public.assignments%ROWTYPE;
   private_id uuid;
   assignment_group public.assignment_groups%ROWTYPE;
   body text;
   subject_line text;
   net_deadline_change_hours bigint;
   net_deadline_change_minutes bigint;
BEGIN
   CASE TG_OP
   WHEN 'INSERT' THEN
      SELECT private_profile_id FROM public.user_roles WHERE user_id = NEW.user_id LIMIT 1 INTO private_id;
      SELECT * FROM public.emails WHERE id = NEW.email_id INTO email;
      SELECT * FROM public.assignments WHERE id = email.assignment_id LIMIT 1 INTO assignment;
      SELECT * FROM public.assignment_groups ag WHERE EXISTS (SELECT 1 FROM public.assignment_groups_members WHERE profile_id = private_id AND 
         ag.id = assignment_group_id) LIMIT 1 INTO assignment_group; 

      SELECT COALESCE(SUM("hours"), 0) INTO net_deadline_change_hours      
      FROM public.assignment_due_date_exceptions      
      WHERE assignment_id = assignment.id      
      AND (student_id = private_id OR assignment_group_id = assignment_group.id);     

      SELECT COALESCE(SUM("minutes"), 0) INTO net_deadline_change_minutes 
      FROM public.assignment_due_date_exceptions      
      WHERE assignment_id = assignment.id      
      AND (student_id = private_id OR assignment_group_id = assignment_group.id);     

      IF (NEW.subject IS NOT NULL) THEN  
         subject_line = NEW.subject;
      ELSE 
         subject_line = email.subject;
      END IF;

      IF (NEW.body IS NOT NULL) THEN
         body = NEW.body;
      ELSE 
         body = email.body;
      END IF;

      body_jsonb := jsonb_build_object(
         'type', 'email',
         'action', 'create',
         'subject', subject_line,
         'body', body
      );

      IF assignment IS NOT NULL THEN
         body_jsonb := body_jsonb || jsonb_build_object('assignment_name', assignment.title) || jsonb_build_object('assignment_slug', assignment.slug);
         IF assignment_group IS NOT NULL THEN
            body_jsonb := body_jsonb || jsonb_build_object('assignment_group_name', assignment_group.name);
         END IF;
         body_jsonb := body_jsonb || jsonb_build_object('due_date', assignment.due_date AT TIME ZONE 'UTC' + (INTERVAL '1 hour' * net_deadline_change_hours) + (INTERVAL '1 minute' * net_deadline_change_minutes));
      END IF;

      INSERT INTO notifications (class_id, "subject", body, style, user_id) VALUES 
         (email.class_id, to_jsonb(subject_line), body_jsonb, 'email', NEW.user_id);
   ELSE
      RAISE EXCEPTION 'Unexpected TG_OP: "%". Should not occur!', TG_OP;
   END CASE;
   
   RETURN NEW;
END
$$;

ALTER FUNCTION "public"."email_notifications"() OWNER TO "postgres";

CREATE OR REPLACE TRIGGER "email_notifications" AFTER INSERT ON "public"."email_recipients" FOR EACH ROW EXECUTE FUNCTION "public"."email_notifications"();
