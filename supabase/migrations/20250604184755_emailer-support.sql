CREATE TYPE "public"."distribution_list_type" AS ENUM (
    'have_submitted',
    'have_not_submitted',
    'class',
    'tag',
    'custom'
);

ALTER TYPE "public"."distribution_list_type" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."email_distribution_list" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "type" public.distribution_list_type not null,
    "class_id" bigint NOT NULL,
    "assignment_id" bigint, 
    "tag_id" uuid
);

CREATE TABLE IF NOT EXISTS "public"."email_distribution_item" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "profile_id" uuid, 
    "email_distribution_list_id" bigint,
    "class_id" bigint NOT NULL
);

ALTER TABLE "public"."email_distribution_list" 
    ADD CONSTRAINT "email_distribution_list_pkey" PRIMARY KEY ("id");

ALTER TABLE "public"."email_distribution_item" 
    ADD CONSTRAINT "email_distribution_item_pkey" PRIMARY KEY ("id");

ALTER TABLE "public"."email_distribution_list"
    ADD CONSTRAINT "email_distribution_list_keys_class_id_fkey" FOREIGN KEY ("class_id") REFERENCES "public"."classes"("id");

ALTER TABLE "public"."email_distribution_list"
    ADD CONSTRAINT "email_distribution_list_keys_assignment_id_fkey" FOREIGN KEY ("assignment_id") REFERENCES "public"."assignments"("id");

ALTER TABLE "public"."email_distribution_list"
    ADD CONSTRAINT "email_distribution_list_keys_tag_id_fkey" FOREIGN KEY ("tag_id") REFERENCES "public"."tags"("id");

ALTER TABLE "public"."email_distribution_item"
    ADD CONSTRAINT "email_distribution_item_keys_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id");

ALTER TABLE "public"."email_distribution_item"
    ADD CONSTRAINT "email_distribution_item_keys_list_fkey" FOREIGN KEY ("email_distribution_list_id") REFERENCES "public"."email_distribution_list"("id");

ALTER TABLE "public"."email_distribution_item"
    ADD CONSTRAINT "email_distribution_item_keys_class_id_fkey" FOREIGN KEY ("class_id") REFERENCES "public"."classes"("id");

ALTER TABLE "public"."email_distribution_list" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."email_distribution_item" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Instructors view email_distribution_list"
ON "public"."email_distribution_list"
AS PERMISSIVE 
FOR SELECT
TO AUTHENTICATED
USING( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors update email_distribution_list"
ON "public"."email_distribution_list"
AS PERMISSIVE 
FOR UPDATE
TO AUTHENTICATED
USING( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors insert email_distribution_list"
ON "public"."email_distribution_list"
AS PERMISSIVE 
FOR INSERT
TO AUTHENTICATED
WITH CHECK( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors delete email_distribution_list"
ON "public"."email_distribution_list"
AS PERMISSIVE 
FOR DELETE
TO AUTHENTICATED
USING( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors view email_distribution_item"
ON "public"."email_distribution_item"
AS PERMISSIVE 
FOR SELECT
TO AUTHENTICATED
USING( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors update email_distribution_item"
ON "public"."email_distribution_item"
AS PERMISSIVE 
FOR UPDATE
TO AUTHENTICATED
USING( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors insert email_distribution_item"
ON "public"."email_distribution_item"
AS PERMISSIVE 
FOR INSERT
TO AUTHENTICATED
WITH CHECK( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors delete email_distribution_item"
ON "public"."email_distribution_item"
AS PERMISSIVE 
FOR DELETE
TO AUTHENTICATED
USING( authorizeforclassinstructor(class_id));

-- Function 1: Create mailing lists when assignment is created
CREATE OR REPLACE FUNCTION public.assignment_auto_create_mailing_lists()  
RETURNS trigger  
LANGUAGE plpgsql 
SECURITY DEFINER
AS $$     
DECLARE      
    have_not_id bigint;     
    profile_record RECORD;     
BEGIN 
    -- Create "have_not_submitted" list
    INSERT INTO public.email_distribution_list ("type", "name", class_id, assignment_id) 
    VALUES ('have_not_submitted', 'Have not submitted ' || NEW.title, NEW.class_id, NEW.id) 
    RETURNING id INTO have_not_id;     
    
    -- Create "have_submitted" list
    INSERT INTO public.email_distribution_list ("type", "name", class_id, assignment_id) 
    VALUES ('have_submitted','Have submitted ' || NEW.title, NEW.class_id, NEW.id);     
    
    -- Add all students to "have_not_submitted" list
    FOR profile_record IN 
        SELECT private_profile_id 
        FROM public.user_roles ur 
        WHERE ur.class_id = NEW.class_id AND ur.role = 'student'
    LOOP         
        INSERT INTO public.email_distribution_item (profile_id, email_distribution_list_id, class_id) 
        VALUES (profile_record.private_profile_id, have_not_id, NEW.class_id);     
    END LOOP;    
    
    RETURN NEW; 
END;
$$;

CREATE OR REPLACE FUNCTION public.auto_enroll_new_students_in_mailing_lists()  
RETURNS trigger  
LANGUAGE plpgsql 
SECURITY DEFINER
AS $$     
DECLARE      
    unsubmitted_list RECORD;
    class_list_id bigint;
BEGIN
    -- enroll in all unsubmitted assignments lists
    IF NEW.role = 'student' THEN
        FOR unsubmitted_list IN 
            SELECT id FROM public.email_distribution_list 
            WHERE class_id = NEW.class_id AND "type" = 'have_not_submitted'
        LOOP    
            INSERT INTO public.email_distribution_item (profile_id, email_distribution_list_id, class_id) 
            VALUES (NEW.private_profile_id, unsubmitted_list.id, NEW.class_id);     
        END LOOP; 
    END IF;
    SELECT id FROM public.email_distribution_list WHERE class_id = NEW.class_id AND "type" = 'class' INTO class_list_id LIMIT 1;

    -- enroll in whole class email list 
    INSERT INTO public.email_distribution_item (profile_id, email_distribution_list_id, class_id) 
            VALUES (NEW.private_profile_id, class_list_id, NEW.class_id);     

    RETURN NEW; 
END;
$$;

CREATE OR REPLACE TRIGGER "assignment_auto_create_mailing_lists" 
    AFTER INSERT ON "public"."assignments" 
    FOR EACH ROW 
    EXECUTE FUNCTION "public"."assignment_auto_create_mailing_lists"();

CREATE OR REPLACE TRIGGER "auto_enroll_new_students_in_mailing_lists" 
    AFTER INSERT ON "public"."user_roles" 
    FOR EACH ROW 
    EXECUTE FUNCTION "public"."auto_enroll_new_students_in_mailing_lists"();

-- when a student submits, make they (+ group members) are moved from have not submitted to have submitted mailing list
CREATE OR REPLACE FUNCTION public.move_student_to_submitted_list() 
RETURNS trigger 
LANGUAGE plpgsql 
SECURITY DEFINER
AS $$     
DECLARE  
    student uuid;
    group_id bigint;  
    have_not_list bigint;
    have_list bigint;
BEGIN
    SELECT assignment_group_id FROM public.assignment_groups_members WHERE profile_id = NEW.profile_id INTO group_id;

    SELECT id FROM public.email_distribution_list WHERE assignment_id = NEW.assignment_id AND class_id = NEW.class_id AND 
        "type" = 'have_not_submitted' INTO have_not_list LIMIT 1;

    SELECT id FROM public.email_distribution_list WHERE assignment_id = NEW.assignment_id AND class_id = NEW.class_id AND 
        "type" = 'have_submitted' INTO have_list LIMIT 1;

    IF group_id IS NULL THEN 
        UPDATE public.email_distribution_item edi 
        SET email_distribution_list_id = have_list
        WHERE edi.email_distribution_list_id = have_not_list AND edi.profile_id = NEW.profile_id;
    ELSE 
        FOR student IN (SELECT profile_id FROM public.assignment_groups_members WHERE assignment_group_id = group_id) LOOP
            UPDATE public.email_distribution_item edi 
            SET email_distribution_list_id = have_list
            WHERE edi.email_distribution_list_id = have_not_list AND edi.profile_id = student;
        END LOOP;
    END IF;
    RETURN NEW; 
END;
$$;

CREATE OR REPLACE TRIGGER "auto_enroll_new_students_in_mailing_lists" 
    AFTER INSERT ON "public"."submissions" 
    FOR EACH ROW 
    EXECUTE FUNCTION "public"."move_student_to_submitted_list"();

CREATE OR REPLACE FUNCTION public.create_mailing_list_for_class() 
RETURNS trigger 
LANGUAGE plpgsql 
SECURITY DEFINER
AS $$     
DECLARE  
    student uuid;
    group_id bigint;  
    have_not_list bigint;
    have_list bigint;
BEGIN
    INSERT INTO public.email_distribution_list ("type", "name", class_id) 
    VALUES ('class', 'All students in ' || NEW.name || ' ' || NEW.semester, NEW.id);   
    RETURN NEW; 
END;
$$;


CREATE OR REPLACE TRIGGER "create_mailing_list_for_class" 
    AFTER INSERT ON "public"."classes"
    FOR EACH ROW
    EXECUTE FUNCTION "public"."create_mailing_list_for_class"();

