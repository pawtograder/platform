CREATE TABLE IF NOT EXISTS "public"."email_distribution_list" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "class_id" bigint not null
);

CREATE TABLE IF NOT EXISTS "public"."email_distribution_item" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "profile_id" uuid not null, 
    "email_distribution_list_id" bigint not null,
    "class_id" bigint not null,
    "email" text not null
);

CREATE TABLE IF NOT EXISTS "public"."email_distribution_exception" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "profile_id" uuid not null,
    "include" boolean not null,
    "class_id" bigint not null,
    "assignment_id" bigint,
    "tag_id" bigint
);

ALTER TABLE "public"."email_distribution_list" 
    ADD CONSTRAINT "email_distribution_list_pkey" PRIMARY KEY ("id");

ALTER TABLE "public"."email_distribution_item" 
    ADD CONSTRAINT "email_distribution_item_pkey" PRIMARY KEY ("id");

ALTER TABLE "public"."email_distribution_list"
    ADD CONSTRAINT "email_distribution_list_keys_class_id_fkey" FOREIGN KEY ("class_id") REFERENCES "public"."classes"("id");

ALTER TABLE "public"."email_distribution_item"
    ADD CONSTRAINT "email_distribution_item_keys_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id");

ALTER TABLE "public"."email_distribution_item"
    ADD CONSTRAINT "email_distribution_item_keys_list_fkey" FOREIGN KEY ("email_distribution_list_id") REFERENCES "public"."email_distribution_list"("id");

ALTER TABLE "public"."email_distribution_item"
    ADD CONSTRAINT "email_distribution_item_keys_class_id_fkey" FOREIGN KEY ("class_id") REFERENCES "public"."classes"("id");

ALTER TABLE "public"."email_distribution_list" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."email_distribution_item" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Instructors view email_distribution_list"
ON "public"."email_distribution_list"
AS PERMISSIVE 
FOR SELECT
TO AUTHENTICATED
USING( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors update email_distribution_list"
ON "public"."email_distribution_list"
AS PERMISSIVE 
FOR UPDATE
TO AUTHENTICATED
USING( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors insert email_distribution_list"
ON "public"."email_distribution_list"
AS PERMISSIVE 
FOR INSERT
TO AUTHENTICATED
WITH CHECK( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors delete email_distribution_list"
ON "public"."email_distribution_list"
AS PERMISSIVE 
FOR DELETE
TO AUTHENTICATED
USING( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors view email_distribution_item"
ON "public"."email_distribution_item"
AS PERMISSIVE 
FOR SELECT
TO AUTHENTICATED
USING( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors update email_distribution_item"
ON "public"."email_distribution_item"
AS PERMISSIVE 
FOR UPDATE
TO AUTHENTICATED
USING( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors insert email_distribution_item"
ON "public"."email_distribution_item"
AS PERMISSIVE 
FOR INSERT
TO AUTHENTICATED
WITH CHECK( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors delete email_distribution_item"
ON "public"."email_distribution_item"
AS PERMISSIVE 
FOR DELETE
TO AUTHENTICATED
USING( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors view email_distribution_exception"
ON "public"."email_distribution_exception"
AS PERMISSIVE 
FOR SELECT
TO AUTHENTICATED
USING( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors update email_distribution_exception"
ON "public"."email_distribution_exception"
AS PERMISSIVE 
FOR UPDATE
TO AUTHENTICATED
USING( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors insert email_distribution_exception"
ON "public"."email_distribution_exception"
AS PERMISSIVE 
FOR INSERT
TO AUTHENTICATED
WITH CHECK( authorizeforclassinstructor(class_id));

CREATE POLICY "Instructors delete email_distribution_exception"
ON "public"."email_distribution_exception"
AS PERMISSIVE 
FOR DELETE
TO AUTHENTICATED
USING( authorizeforclassinstructor(class_id));


