create table "public"."assignment_handout_commits" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "assignment_id" bigint not null,
    "sha" text not null,
    "message" text not null,
    "author" text,
    "class_id" bigint
);


alter table "public"."assignment_handout_commits" enable row level security;

create table "public"."autograder_commits" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "autograder_id" bigint not null,
    "sha" text not null,
    "message" text not null,
    "author" text,
    "class_id" bigint not null,
    "ref" text not null
);


alter table "public"."autograder_commits" enable row level security;

alter table "public"."assignments" add column "latest_template_sha" text;

alter table "public"."autograder" add column "class_id" bigint;

alter table "public"."autograder" add column "latest_autograder_sha" text;

alter table "public"."submission_reviews" add column "total_autograde_score" numeric not null default '0'::numeric;

CREATE UNIQUE INDEX assignment_handout_commit_pkey ON public.assignment_handout_commits USING btree (id);

CREATE UNIQUE INDEX autograder_commits_pkey ON public.autograder_commits USING btree (id);

CREATE INDEX autograder_regression_test_repository_idx ON public.autograder_regression_test USING btree (repository);

CREATE INDEX submissions_id_assignment_id_repository_idx ON public.submissions USING btree (id, assignment_id, repository);

CREATE INDEX submissions_repository_idx ON public.submissions USING hash (repository);

alter table "public"."assignment_handout_commits" add constraint "assignment_handout_commit_pkey" PRIMARY KEY using index "assignment_handout_commit_pkey";

alter table "public"."autograder_commits" add constraint "autograder_commits_pkey" PRIMARY KEY using index "autograder_commits_pkey";

alter table "public"."assignment_handout_commits" add constraint "assignment_handout_commit_assignment_id_fkey" FOREIGN KEY (assignment_id) REFERENCES assignments(id) not valid;

alter table "public"."assignment_handout_commits" validate constraint "assignment_handout_commit_assignment_id_fkey";

alter table "public"."assignment_handout_commits" add constraint "assignment_handout_commits_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) not valid;

alter table "public"."assignment_handout_commits" validate constraint "assignment_handout_commits_class_id_fkey";

alter table "public"."autograder" add constraint "autograder_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) not valid;

alter table "public"."autograder" validate constraint "autograder_class_id_fkey";

alter table "public"."autograder_commits" add constraint "autograder_commits_assignment_id_fkey" FOREIGN KEY (autograder_id) REFERENCES assignments(id) not valid;

alter table "public"."autograder_commits" validate constraint "autograder_commits_assignment_id_fkey";

alter table "public"."autograder_commits" add constraint "autograder_commits_autograder_id_fkey" FOREIGN KEY (autograder_id) REFERENCES autograder(id) not valid;

alter table "public"."autograder_commits" validate constraint "autograder_commits_autograder_id_fkey";

alter table "public"."autograder_commits" add constraint "autograder_commits_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) not valid;

alter table "public"."autograder_commits" validate constraint "autograder_commits_class_id_fkey";

alter table "public"."autograder_commits" add constraint "autograder_commits_class_id_fkey1" FOREIGN KEY (class_id) REFERENCES classes(id) not valid;

alter table "public"."autograder_commits" validate constraint "autograder_commits_class_id_fkey1";

set check_function_bodies = off;

create or replace view "public"."submissions_with_grades_for_assignment_and_regression_test" 
WITH ("security_invoker"='true') 
as  SELECT activesubmissionsbystudent.id,
    activesubmissionsbystudent.class_id,
    activesubmissionsbystudent.assignment_id,
    p.name,
    p.sortable_name,
    s.id AS activesubmissionid,
    s.created_at,
    s.released,
    s.repository,
    s.sha,
    rev.total_autograde_score AS autograder_score,
    ag.name AS groupname,
    ar.grader_sha,
    ar.grader_action_sha,
    ar_rt.score AS rt_autograder_score,
    ar_rt.grader_sha AS rt_grader_sha,
    ar_rt.grader_action_sha AS rt_grader_action_sha
   FROM ((((((((( SELECT r.id,
                CASE
                    WHEN (isub.id IS NULL) THEN gsub.id
                    ELSE isub.id
                END AS sub_id,
            r.private_profile_id,
            r.class_id,
            a.id AS assignment_id,
            agm.assignment_group_id AS assignmentgroupid,
            a.due_date
           FROM ((((user_roles r
             JOIN assignments a ON ((a.class_id = r.class_id)))
             LEFT JOIN submissions isub ON (((isub.profile_id = r.private_profile_id) AND (isub.is_active = true) AND (isub.assignment_id = a.id))))
             LEFT JOIN assignment_groups_members agm ON (((agm.profile_id = r.private_profile_id) AND (agm.assignment_id = a.id))))
             LEFT JOIN submissions gsub ON (((gsub.assignment_group_id = agm.id) AND (gsub.is_active = true) AND (gsub.assignment_id = a.id))))
          WHERE (r.role = 'student'::app_role)) activesubmissionsbystudent
     JOIN profiles p ON ((p.id = activesubmissionsbystudent.private_profile_id)))
     LEFT JOIN submissions s ON ((s.id = activesubmissionsbystudent.sub_id)))
     LEFT JOIN submission_reviews rev ON ((rev.id = s.grading_review_id)))
     LEFT JOIN grader_results ar ON ((ar.submission_id = s.id)))
     LEFT JOIN autograder_regression_test rt ON ((rt.repository = s.repository)))
     LEFT JOIN ( SELECT max(grader_results.id) AS id,
            grader_results.autograder_regression_test
           FROM grader_results
          GROUP BY grader_results.autograder_regression_test, grader_results.grader_sha) current_rt ON ((current_rt.autograder_regression_test = rt.id)))
     LEFT JOIN grader_results ar_rt ON ((ar_rt.id = current_rt.id)))
     LEFT JOIN assignment_groups ag ON ((ag.id = activesubmissionsbystudent.assignmentgroupid)));


CREATE OR REPLACE FUNCTION public.assignments_grader_config_auto_populate()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
    declare 
    rubric_id int;
    begin
  
  INSERT INTO autograder (id, class_id) VALUES (NEW.id, NEW.class_id);
  INSERT INTO autograder_regression_test (autograder_id,repository) VALUES (NEW.id, NEW.template_repo);
  INSERT INTO rubrics (name, class_id) VALUES ('Grading Rubric', NEW.class_id) RETURNING id into rubric_id;
  UPDATE assignments set grading_rubric_id=rubric_id WHERE id=NEW.id;
  RETURN NULL;
end;$function$
;

create or replace view "public"."autograder_regression_test_by_grader" 
WITH ("security_invoker"='true') 
as  SELECT a.grader_repo,
    t.repository,
    s.sha,
    t.id,
    g.class_id,
    rev.total_autograde_score AS score,
        CASE
            WHEN (gr.name IS NULL) THEN p.name
            ELSE gr.name
        END AS name
   FROM (((((((autograder_regression_test t
     JOIN autograder a ON ((a.id = t.autograder_id)))
     JOIN ( SELECT max(s_1.id) AS submission_id,
            t_1.id,
            s_1.repository
           FROM (autograder_regression_test t_1
             JOIN submissions s_1 ON ((s_1.repository = t_1.repository)))
          GROUP BY t_1.id, s_1.repository) latest_subs ON ((latest_subs.id = t.id)))
     JOIN submissions s ON ((s.id = latest_subs.submission_id)))
     JOIN grader_results g ON ((g.submission_id = latest_subs.submission_id)))
     LEFT JOIN profiles p ON ((p.id = s.profile_id)))
     LEFT JOIN submission_reviews rev ON ((rev.id = s.grading_review_id)))
     LEFT JOIN assignment_groups gr ON ((gr.id = s.assignment_group_id)));


CREATE OR REPLACE FUNCTION public.submissionreviewrecompute()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$declare
  calculated_score numeric;
  calculated_autograde_score numeric;
  the_submission submissions%ROWTYPE;
  existing_submission_review_id int8;
begin
  calculated_score=0;
  calculated_autograde_score=0;
  if 'rubric_check_id' = any(select jsonb_object_keys(to_jsonb(new))) then 
    if  NEW.rubric_check_id is null and (OLD is null OR OLD.rubric_check_id is null) then 
     return NEW;
    end if;
  end if;

  if 'submission_review_id' = any(select jsonb_object_keys(to_jsonb(new))) then 
    -- If the field is there but null, we don't have anything to update.
    if NEW.submission_review_id is null then
      return NEW;
    end if;
    -- The submission review we are calculating is the one on the row
    existing_submission_review_id = NEW.submission_review_id;
  else
    -- The submission review we are calculating is the one on the assignment, make sure it exists
    select grading_review_id into existing_submission_review_id from public.submissions where id=NEW.submission_id;
  end if;

select sum(t.score) into calculated_autograde_score from grader_results r 
  inner join grader_result_tests t on t.grader_result_id=r.id
  where r.submission_id=NEW.submission_id;


  select sum(score) into calculated_score from (select c.id,c.name,
  case
    when c.is_additive then LEAST(sum(sfc.points),c.total_points)
    else GREATEST(c.total_points - sum(sfc.points), 0)
  end as score
  from public.submission_file_comments sfc
  inner join public.rubric_checks ch on ch.id=sfc.rubric_check_id
  inner join public.rubric_criteria c on c.id=ch.rubric_criteria_id
  where sfc.submission_review_id=existing_submission_review_id and sfc.deleted_at is null and sfc.points is not null group by c.id
  union
  select c.id,c.name,
  case
    when c.is_additive then LEAST(sum(sfc.points),c.total_points)
    else GREATEST(c.total_points - sum(sfc.points), 0)
    end as score
  from public.submission_comments sfc
  inner join public.rubric_checks ch on ch.id=sfc.rubric_check_id
  inner join public.rubric_criteria c on c.id=ch.rubric_criteria_id
  where sfc.submission_review_id=existing_submission_review_id and sfc.deleted_at is null and sfc.points is not null group by c.id
union
  select c.id,c.name,
  case
    when c.is_additive then LEAST(sum(sfc.points),c.total_points)
    else GREATEST(c.total_points - sum(sfc.points), 0)
    end as score
  from public.submission_artifact_comments sfc
  inner join public.rubric_checks ch on ch.id=sfc.rubric_check_id
  inner join public.rubric_criteria c on c.id=ch.rubric_criteria_id
  where sfc.submission_review_id=existing_submission_review_id and sfc.deleted_at is null and sfc.points is not null group by c.id


  ) as combo;
  if calculated_score is null then
    calculated_score = 0;
  end if;

  UPDATE public.submission_reviews SET total_score=calculated_score+calculated_autograde_score,total_autograde_score=calculated_autograde_score WHERE id=existing_submission_review_id;

  return NEW;
end;$function$
;

create or replace view "public"."submissions_with_grades_for_assignment" 
WITH ("security_invoker"='true') 
as  SELECT activesubmissionsbystudent.id,
    activesubmissionsbystudent.class_id,
    activesubmissionsbystudent.assignment_id,
    p.name,
    p.sortable_name,
    s.id AS activesubmissionid,
    s.created_at,
    s.released,
    s.repository,
    s.sha,
    rev.total_autograde_score AS autograder_score,
    rev.grader,
    rev.meta_grader,
    rev.total_score,
    rev.tweak,
    rev.completed_by,
    rev.completed_at,
    rev.checked_at,
    rev.checked_by,
    graderprofile.name AS assignedgradername,
    metagraderprofile.name AS assignedmetagradername,
    completerprofile.name AS gradername,
    checkgraderprofile.name AS checkername,
    ag.name AS groupname,
    activesubmissionsbystudent.tokens_consumed,
    activesubmissionsbystudent.hours,
    activesubmissionsbystudent.due_date,
    (activesubmissionsbystudent.due_date + ('01:00:00'::interval * (activesubmissionsbystudent.hours)::double precision)) AS late_due_date,
    ar.grader_sha,
    ar.grader_action_sha
   FROM (((((((((( SELECT r.id,
                CASE
                    WHEN (isub.id IS NULL) THEN gsub.id
                    ELSE isub.id
                END AS sub_id,
            r.private_profile_id,
            r.class_id,
            a.id AS assignment_id,
            agm.assignment_group_id AS assignmentgroupid,
            lt.tokens_consumed,
            lt.hours,
            a.due_date
           FROM (((((user_roles r
             JOIN assignments a ON ((a.class_id = r.class_id)))
             LEFT JOIN submissions isub ON (((isub.profile_id = r.private_profile_id) AND (isub.is_active = true) AND (isub.assignment_id = a.id))))
             LEFT JOIN assignment_groups_members agm ON (((agm.profile_id = r.private_profile_id) AND (agm.assignment_id = a.id))))
             LEFT JOIN ( SELECT sum(assignment_due_date_exceptions.tokens_consumed) AS tokens_consumed,
                    sum(assignment_due_date_exceptions.hours) AS hours,
                    assignment_due_date_exceptions.student_id,
                    assignment_due_date_exceptions.assignment_group_id
                   FROM assignment_due_date_exceptions
                  GROUP BY assignment_due_date_exceptions.student_id, assignment_due_date_exceptions.assignment_group_id) lt ON ((((agm.assignment_group_id IS NULL) AND (lt.student_id = r.private_profile_id)) OR ((agm.assignment_group_id IS NOT NULL) AND (lt.assignment_group_id = agm.assignment_group_id)))))
             LEFT JOIN submissions gsub ON (((gsub.assignment_group_id = agm.id) AND (gsub.is_active = true) AND (gsub.assignment_id = a.id))))
          WHERE (r.role = 'student'::app_role)) activesubmissionsbystudent
     JOIN profiles p ON ((p.id = activesubmissionsbystudent.private_profile_id)))
     LEFT JOIN submissions s ON ((s.id = activesubmissionsbystudent.sub_id)))
     LEFT JOIN submission_reviews rev ON ((rev.id = s.grading_review_id)))
     LEFT JOIN grader_results ar ON ((ar.submission_id = s.id)))
     LEFT JOIN assignment_groups ag ON ((ag.id = activesubmissionsbystudent.assignmentgroupid)))
     LEFT JOIN profiles completerprofile ON ((completerprofile.id = rev.completed_by)))
     LEFT JOIN profiles graderprofile ON ((graderprofile.id = rev.grader)))
     LEFT JOIN profiles metagraderprofile ON ((metagraderprofile.id = rev.meta_grader)))
     LEFT JOIN profiles checkgraderprofile ON ((checkgraderprofile.id = rev.checked_by)));


grant delete on table "public"."assignment_handout_commits" to "anon";

grant insert on table "public"."assignment_handout_commits" to "anon";

grant references on table "public"."assignment_handout_commits" to "anon";

grant select on table "public"."assignment_handout_commits" to "anon";

grant trigger on table "public"."assignment_handout_commits" to "anon";

grant truncate on table "public"."assignment_handout_commits" to "anon";

grant update on table "public"."assignment_handout_commits" to "anon";

grant delete on table "public"."assignment_handout_commits" to "authenticated";

grant insert on table "public"."assignment_handout_commits" to "authenticated";

grant references on table "public"."assignment_handout_commits" to "authenticated";

grant select on table "public"."assignment_handout_commits" to "authenticated";

grant trigger on table "public"."assignment_handout_commits" to "authenticated";

grant truncate on table "public"."assignment_handout_commits" to "authenticated";

grant update on table "public"."assignment_handout_commits" to "authenticated";

grant delete on table "public"."assignment_handout_commits" to "service_role";

grant insert on table "public"."assignment_handout_commits" to "service_role";

grant references on table "public"."assignment_handout_commits" to "service_role";

grant select on table "public"."assignment_handout_commits" to "service_role";

grant trigger on table "public"."assignment_handout_commits" to "service_role";

grant truncate on table "public"."assignment_handout_commits" to "service_role";

grant update on table "public"."assignment_handout_commits" to "service_role";

grant delete on table "public"."autograder_commits" to "anon";

grant insert on table "public"."autograder_commits" to "anon";

grant references on table "public"."autograder_commits" to "anon";

grant select on table "public"."autograder_commits" to "anon";

grant trigger on table "public"."autograder_commits" to "anon";

grant truncate on table "public"."autograder_commits" to "anon";

grant update on table "public"."autograder_commits" to "anon";

grant delete on table "public"."autograder_commits" to "authenticated";

grant insert on table "public"."autograder_commits" to "authenticated";

grant references on table "public"."autograder_commits" to "authenticated";

grant select on table "public"."autograder_commits" to "authenticated";

grant trigger on table "public"."autograder_commits" to "authenticated";

grant truncate on table "public"."autograder_commits" to "authenticated";

grant update on table "public"."autograder_commits" to "authenticated";

grant delete on table "public"."autograder_commits" to "service_role";

grant insert on table "public"."autograder_commits" to "service_role";

grant references on table "public"."autograder_commits" to "service_role";

grant select on table "public"."autograder_commits" to "service_role";

grant trigger on table "public"."autograder_commits" to "service_role";

grant truncate on table "public"."autograder_commits" to "service_role";

grant update on table "public"."autograder_commits" to "service_role";

create policy "only instructors view"
on "public"."assignment_handout_commits"
as permissive
for select
to public
using (authorizeforclassinstructor(class_id));

alter table "public"."assignments" add column "self_review_rubric_id" bigint;
