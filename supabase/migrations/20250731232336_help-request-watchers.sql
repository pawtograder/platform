create table "public"."help_request_watchers" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "help_request_id" bigint not null,
    "class_id" bigint not null,
    "enabled" boolean not null
);


alter table "public"."help_request_watchers" enable row level security;

CREATE UNIQUE INDEX help_request_watchers_pkey ON public.help_request_watchers USING btree (id);

alter table "public"."help_request_watchers" add constraint "help_request_watchers_pkey" PRIMARY KEY using index "help_request_watchers_pkey";

alter table "public"."help_request_watchers" add constraint "help_request_watchers_class_id_fkey" FOREIGN KEY (class_id) REFERENCES classes(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."help_request_watchers" validate constraint "help_request_watchers_class_id_fkey";

alter table "public"."help_request_watchers" add constraint "help_request_watchers_help_request_id_fkey" FOREIGN KEY (help_request_id) REFERENCES help_requests(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."help_request_watchers" validate constraint "help_request_watchers_help_request_id_fkey";

alter table "public"."help_request_watchers" add constraint "help_request_watchers_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."help_request_watchers" validate constraint "help_request_watchers_user_id_fkey";

grant delete on table "public"."help_request_watchers" to "anon";

grant insert on table "public"."help_request_watchers" to "anon";

grant references on table "public"."help_request_watchers" to "anon";

grant select on table "public"."help_request_watchers" to "anon";

grant trigger on table "public"."help_request_watchers" to "anon";

grant truncate on table "public"."help_request_watchers" to "anon";

grant update on table "public"."help_request_watchers" to "anon";

grant delete on table "public"."help_request_watchers" to "authenticated";

grant insert on table "public"."help_request_watchers" to "authenticated";

grant references on table "public"."help_request_watchers" to "authenticated";

grant select on table "public"."help_request_watchers" to "authenticated";

grant trigger on table "public"."help_request_watchers" to "authenticated";

grant truncate on table "public"."help_request_watchers" to "authenticated";

grant update on table "public"."help_request_watchers" to "authenticated";

grant delete on table "public"."help_request_watchers" to "service_role";

grant insert on table "public"."help_request_watchers" to "service_role";

grant references on table "public"."help_request_watchers" to "service_role";

grant select on table "public"."help_request_watchers" to "service_role";

grant trigger on table "public"."help_request_watchers" to "service_role";

grant truncate on table "public"."help_request_watchers" to "service_role";

grant update on table "public"."help_request_watchers" to "service_role";

-- Create better RLS policies following best practices
create policy "Users can select their own help request watchers"
on "public"."help_request_watchers"
for select
to authenticated
using ((select auth.uid()) = user_id);

create policy "Users can insert their own help request watchers"
on "public"."help_request_watchers"
for insert
to authenticated
with check ((select auth.uid()) = user_id);

create policy "Users can update their own help request watchers"
on "public"."help_request_watchers"
for update
to authenticated
using ((select auth.uid()) = user_id)
with check ((select auth.uid()) = user_id);

create policy "Users can delete their own help request watchers"
on "public"."help_request_watchers"
for delete
to authenticated
using ((select auth.uid()) = user_id);

-- Add indexes for better performance
create index help_request_watchers_user_id_idx on public.help_request_watchers using btree (user_id);
create index help_request_watchers_help_request_id_idx on public.help_request_watchers using btree (help_request_id);
create index help_request_watchers_class_id_idx on public.help_request_watchers using btree (class_id);

-- Create unique constraint to prevent duplicate watchers
create unique index help_request_watchers_user_help_request_unique 
on public.help_request_watchers using btree (user_id, help_request_id);

alter table "public"."help_request_watchers" 
add constraint "help_request_watchers_user_help_request_unique" 
unique using index "help_request_watchers_user_help_request_unique";

-- Update help request notification functions to respect watch status
CREATE OR REPLACE FUNCTION public.create_help_request_message_notification(p_class_id bigint, p_help_request_id bigint, p_help_queue_id bigint, p_help_queue_name text, p_message_id bigint, p_author_profile_id uuid, p_author_name text, p_message_preview text, p_help_request_creator_profile_id uuid, p_help_request_creator_name text, p_is_private boolean DEFAULT false)
 RETURNS void
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  notification_body jsonb;
  target_user_id uuid;
  user_role text;
begin
  -- Build notification body
  notification_body := jsonb_build_object(
    'type', 'help_request_message',
    'help_request_id', p_help_request_id,
    'help_queue_id', p_help_queue_id,
    'help_queue_name', p_help_queue_name,
    'message_id', p_message_id,
    'author_profile_id', p_author_profile_id,
    'author_name', p_author_name,
    'message_preview', p_message_preview,
    'help_request_creator_profile_id', p_help_request_creator_profile_id,
    'help_request_creator_name', p_help_request_creator_name,
    'is_private', p_is_private
  );

  -- Send notifications only to users who are watching this help request
  insert into public.notifications (user_id, class_id, subject, body)
  select 
    hrw.user_id,
    p_class_id,
    jsonb_build_object('text', 'New message in help request'),
    notification_body
  from public.help_request_watchers hrw
  join public.user_roles ur on ur.user_id = hrw.user_id and ur.class_id = p_class_id
  left join public.help_queue_assignments hqa on hqa.ta_profile_id = ur.private_profile_id 
    and hqa.help_queue_id = p_help_queue_id 
    and hqa.is_active = true
  where hrw.help_request_id = p_help_request_id
    and hrw.enabled = true
    and hrw.user_id != p_author_profile_id -- Don't notify the message author
    and (
      -- Always notify instructors and graders who are watching
      ur.role in ('instructor', 'grader')
      -- Always notify the help request creator if they're watching
      or ur.private_profile_id = p_help_request_creator_profile_id
      -- For public requests, notify students who are watching (unless private)
      or (not p_is_private and ur.role = 'student')
      -- Notify TAs who are actively working this queue and watching
      or hqa.id is not null
    );
end;
$function$;

CREATE OR REPLACE FUNCTION public.create_help_request_notification(p_class_id bigint, p_notification_type text, p_help_request_id bigint, p_help_queue_id bigint, p_help_queue_name text, p_creator_profile_id uuid, p_creator_name text, p_assignee_profile_id uuid DEFAULT NULL::uuid, p_assignee_name text DEFAULT NULL::text, p_status help_request_status DEFAULT NULL::help_request_status, p_request_preview text DEFAULT ''::text, p_is_private boolean DEFAULT false, p_action text DEFAULT 'created'::text)
 RETURNS void
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
declare
  notification_body jsonb;
  target_user_id uuid;
  user_role text;
begin
  -- Build notification body based on type
  if p_notification_type = 'help_request' then
    notification_body := jsonb_build_object(
      'type', 'help_request',
      'action', p_action,
      'help_request_id', p_help_request_id,
      'help_queue_id', p_help_queue_id,
      'help_queue_name', p_help_queue_name,
      'creator_profile_id', p_creator_profile_id,
      'creator_name', p_creator_name,
      'assignee_profile_id', p_assignee_profile_id,
      'assignee_name', p_assignee_name,
      'status', p_status,
      'request_preview', p_request_preview,
      'is_private', p_is_private
    );
  end if;

  -- For 'created' action, notify all eligible users and auto-create watchers
  if p_action = 'created' then
    -- Send notifications to eligible users (not restricted to watchers for creation)
    for target_user_id, user_role in
      select distinct ur.user_id, ur.role
      from public.user_roles ur
      where ur.class_id = p_class_id
        and (
          -- For private requests, only notify instructors, graders, creator, and assignee
          (p_is_private and ur.role in ('instructor', 'grader'))
          or (p_is_private and ur.private_profile_id = p_creator_profile_id)
          or (p_is_private and ur.private_profile_id = p_assignee_profile_id)
          -- For public requests, notify everyone except the creator
          or (not p_is_private and ur.private_profile_id != p_creator_profile_id)
        )
    loop
      insert into public.notifications (user_id, class_id, subject, body)
      values (
        target_user_id,
        p_class_id,
        jsonb_build_object('text', 'Help Request ' || p_action),
        notification_body
      );
    end loop;

    -- Auto-create watcher for the creator (enabled by default)
    insert into public.help_request_watchers (user_id, help_request_id, class_id, enabled)
    select ur.user_id, p_help_request_id, p_class_id, true
    from public.user_roles ur
    where ur.private_profile_id = p_creator_profile_id 
      and ur.class_id = p_class_id
    on conflict (user_id, help_request_id) do nothing;

  else
    -- For other actions (assigned, status_changed), only notify watchers
    insert into public.notifications (user_id, class_id, subject, body)
    select 
      hrw.user_id,
      p_class_id,
      jsonb_build_object('text', 'Help Request ' || p_action),
      notification_body
    from public.help_request_watchers hrw
    join public.user_roles ur on ur.user_id = hrw.user_id and ur.class_id = p_class_id
    where hrw.help_request_id = p_help_request_id
      and hrw.enabled = true
      and (
        -- For private requests, only notify instructors, graders, creator, and assignee
        (p_is_private and ur.role in ('instructor', 'grader'))
        or (p_is_private and ur.private_profile_id = p_creator_profile_id)
        or (p_is_private and ur.private_profile_id = p_assignee_profile_id)
        -- For public requests, notify all watching users
        or not p_is_private
      );
  end if;
end;
$function$;